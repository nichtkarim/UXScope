"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_src_lib_llmProviders_ts";
exports.ids = ["_rsc_src_lib_llmProviders_ts"];
exports.modules = {

/***/ "(rsc)/./src/lib/llmProviders.ts":
/*!*********************************!*\
  !*** ./src/lib/llmProviders.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LLM_MODELS: () => (/* binding */ LLM_MODELS),\n/* harmony export */   callLLM: () => (/* binding */ callLLM),\n/* harmony export */   validateApiKey: () => (/* binding */ validateApiKey)\n/* harmony export */ });\nconst LLM_MODELS = {\n    'gpt-4o': {\n        id: 'gpt-4o',\n        name: 'GPT-4o',\n        description: 'Advanced multimodal model with strong reasoning capabilities',\n        provider: 'openai',\n        requiresApiKey: true,\n        supportsVision: true,\n        modelId: 'gpt-4o'\n    },\n    'gpt-4o-mini': {\n        id: 'gpt-4o-mini',\n        name: 'GPT-4o Mini',\n        description: 'Cost-efficient small model with multimodal capabilities',\n        provider: 'openai',\n        requiresApiKey: true,\n        supportsVision: true,\n        modelId: 'gpt-4o-mini'\n    },\n    'claude-3-5-sonnet': {\n        id: 'claude-3-5-sonnet',\n        name: 'Claude 3.5 Sonnet',\n        description: 'Anthropic\\'s latest model for complex reasoning and analysis',\n        provider: 'anthropic',\n        requiresApiKey: true,\n        supportsVision: true,\n        modelId: 'claude-3-5-sonnet-20241022'\n    },\n    'claude-3-opus': {\n        id: 'claude-3-opus',\n        name: 'Claude 3 Opus',\n        description: 'Anthropics leistungsstärkstes Modell mit außergewöhnlichen Analyse-Fähigkeiten',\n        provider: 'anthropic',\n        requiresApiKey: true,\n        supportsVision: true,\n        modelId: 'claude-3-opus-20240229'\n    },\n    'claude-3-sonnet': {\n        id: 'claude-3-sonnet',\n        name: 'Claude 3 Sonnet',\n        description: 'Ausgewogenes Claude 3 Modell mit exzellenter Leistung und Effizienz',\n        provider: 'anthropic',\n        requiresApiKey: true,\n        supportsVision: true,\n        modelId: 'claude-3-sonnet-20240229'\n    },\n    'claude-3-haiku': {\n        id: 'claude-3-haiku',\n        name: 'Claude 3 Haiku',\n        description: 'Fast and cost-efficient model for simple tasks',\n        provider: 'anthropic',\n        requiresApiKey: true,\n        supportsVision: true,\n        modelId: 'claude-3-haiku-20240307'\n    },\n    'llama-3.1-70b': {\n        id: 'llama-3.1-70b',\n        name: 'Llama 3.1 70B',\n        description: 'Meta\\'s open-source model via Together AI',\n        provider: 'together',\n        requiresApiKey: true,\n        supportsVision: false,\n        modelId: 'meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo'\n    },\n    'llama-3.1-8b': {\n        id: 'llama-3.1-8b',\n        name: 'Llama 3.1 8B',\n        description: 'Smaller, faster version of Llama 3.1',\n        provider: 'together',\n        requiresApiKey: true,\n        supportsVision: false,\n        modelId: 'meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo'\n    },\n    'llama-3.2-11b-vision': {\n        id: 'llama-3.2-11b-vision',\n        name: 'Llama 3.2 11B Vision',\n        description: 'Vision-capable Llama model',\n        provider: 'together',\n        requiresApiKey: true,\n        supportsVision: true,\n        modelId: 'meta-llama/Llama-3.2-11B-Vision-Instruct-Turbo'\n    },\n    'ollama-llama3': {\n        id: 'ollama-llama3',\n        name: 'Llama 3 (Local)',\n        description: 'Local Llama 3 model via Ollama',\n        provider: 'local',\n        requiresApiKey: false,\n        supportsVision: false,\n        modelId: 'llama3'\n    },\n    'grok-beta': {\n        id: 'grok-beta',\n        name: 'Grok 4',\n        description: 'xAI\\'s Grok 4 model with advanced reasoning and real-time information',\n        provider: 'grok',\n        requiresApiKey: true,\n        supportsVision: false,\n        modelId: 'grok-4'\n    },\n    'grok-vision-beta': {\n        id: 'grok-vision-beta',\n        name: 'Grok 4 Vision',\n        description: 'Grok 4 model with enhanced vision capabilities',\n        provider: 'grok',\n        requiresApiKey: true,\n        supportsVision: true,\n        modelId: 'grok-4'\n    }\n};\nfunction validateApiKey(provider, apiKey) {\n    if (!apiKey) return false;\n    switch(provider){\n        case 'openai':\n            return apiKey.startsWith('sk-');\n        case 'anthropic':\n            return apiKey.startsWith('sk-ant-');\n        case 'together':\n            return apiKey.length > 10;\n        case 'grok':\n            return apiKey.startsWith('xai-') || apiKey.length > 10 // Grok API keys start with 'xai-' or are longer strings\n            ;\n        case 'local':\n            return true;\n        default:\n            return false;\n    }\n}\nasync function createOpenAIClient(apiKey) {\n    try {\n        const { default: OpenAI } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/openai\").then(__webpack_require__.bind(__webpack_require__, /*! openai */ \"(rsc)/./node_modules/openai/index.mjs\"));\n        return new OpenAI({\n            apiKey\n        });\n    } catch (error) {\n        console.error('Failed to import OpenAI SDK:', error);\n        throw new Error('OpenAI SDK not available. Please install with: npm install openai');\n    }\n}\nasync function createAnthropicClient(apiKey) {\n    try {\n        const { default: Anthropic } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@anthropic-ai\").then(__webpack_require__.bind(__webpack_require__, /*! @anthropic-ai/sdk */ \"(rsc)/./node_modules/@anthropic-ai/sdk/index.mjs\"));\n        return new Anthropic({\n            apiKey\n        });\n    } catch (error) {\n        console.error('Failed to import Anthropic SDK:', error);\n        throw new Error('Anthropic SDK not available. Please install with: npm install @anthropic-ai/sdk');\n    }\n}\nasync function createTogetherClient(apiKey) {\n    try {\n        const { default: Together } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/formdata-node\"), __webpack_require__.e(\"vendor-chunks/tr46\"), __webpack_require__.e(\"vendor-chunks/together-ai\"), __webpack_require__.e(\"vendor-chunks/web-streams-polyfill\"), __webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/whatwg-url\"), __webpack_require__.e(\"vendor-chunks/event-target-shim\"), __webpack_require__.e(\"vendor-chunks/agentkeepalive\"), __webpack_require__.e(\"vendor-chunks/form-data-encoder\"), __webpack_require__.e(\"vendor-chunks/webidl-conversions\"), __webpack_require__.e(\"vendor-chunks/abort-controller\"), __webpack_require__.e(\"vendor-chunks/ms\"), __webpack_require__.e(\"vendor-chunks/humanize-ms\")]).then(__webpack_require__.bind(__webpack_require__, /*! together-ai */ \"(rsc)/./node_modules/together-ai/index.mjs\"));\n        return new Together({\n            apiKey\n        });\n    } catch (error) {\n        console.error('Failed to import Together SDK:', error);\n        throw new Error('Together SDK not available. Please install with: npm install together-ai');\n    }\n}\nasync function createGrokClient(apiKey) {\n    try {\n        const { default: OpenAI } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/openai\").then(__webpack_require__.bind(__webpack_require__, /*! openai */ \"(rsc)/./node_modules/openai/index.mjs\"));\n        return new OpenAI({\n            apiKey,\n            baseURL: 'https://api.x.ai/v1'\n        });\n    } catch (error) {\n        console.error('Failed to import OpenAI SDK for Grok:', error);\n        throw new Error('OpenAI SDK not available for Grok. Please install with: npm install openai');\n    }\n}\nasync function createLLMClient(modelId, apiKey) {\n    const config = LLM_MODELS[modelId];\n    if (!config) {\n        throw new Error(`Unknown model: ${modelId}`);\n    }\n    switch(config.provider){\n        case 'openai':\n            return await createOpenAIClient(apiKey);\n        case 'anthropic':\n            return await createAnthropicClient(apiKey);\n        case 'together':\n            return await createTogetherClient(apiKey);\n        case 'grok':\n            return await createGrokClient(apiKey);\n        case 'local':\n            return null;\n        default:\n            throw new Error(`Unsupported provider: ${config.provider}`);\n    }\n}\nasync function generateResponse(client, modelConfig, messages, includeImages = false) {\n    switch(modelConfig.provider){\n        case 'openai':\n            {\n                const completion = await client.chat.completions.create({\n                    model: modelConfig.modelId,\n                    messages,\n                    max_tokens: 2000,\n                    temperature: 0.7\n                });\n                return completion.choices[0]?.message?.content || 'No response generated';\n            }\n        case 'anthropic':\n            {\n                const completion = await client.messages.create({\n                    model: modelConfig.modelId,\n                    max_tokens: 2000,\n                    temperature: 0.7,\n                    messages\n                });\n                return completion.content[0]?.text || 'No response generated';\n            }\n        case 'together':\n            {\n                const completion = await client.chat.completions.create({\n                    model: modelConfig.modelId,\n                    messages,\n                    max_tokens: 2000,\n                    temperature: 0.7\n                });\n                return completion.choices[0]?.message?.content || 'No response generated';\n            }\n        case 'grok':\n            {\n                try {\n                    // Ultra-aggressive ASCII-only Bereinigung für Grok\n                    const cleanText = (text)=>{\n                        // Schritt 1: Unicode in einfache ASCII-Zeichen umwandeln\n                        let cleaned = text// Deutsche Umlaute\n                        .replace(/[äÄ]/g, 'ae').replace(/[öÖ]/g, 'oe').replace(/[üÜ]/g, 'ue').replace(/ß/g, 'ss')// Alle typografischen Anführungszeichen\n                        .replace(/[\"\"„«»]/g, '\"').replace(/[''‚‹›]/g, \"'\")// Alle Gedankenstriche\n                        .replace(/[–—]/g, '-').replace(/…/g, '...')// Alle anderen diakritischen Zeichen\n                        .replace(/[àáâãåæçèéêëìíîïñòóôõøùúûý]/gi, function(match) {\n                            const chars = 'aaaaaaeceeeeiiiinoooooouuuy';\n                            const index = 'àáâãåæçèéêëìíîïñòóôõøùúûý'.indexOf(match.toLowerCase());\n                            return index >= 0 ? chars[index] : match;\n                        });\n                        // Schritt 2: Byte-für-Byte prüfen und nur sichere ASCII behalten\n                        let result = '';\n                        for(let i = 0; i < cleaned.length; i++){\n                            const char = cleaned[i];\n                            const code = char.charCodeAt(0);\n                            // Nur ASCII-Zeichen 32-126 (druckbare Zeichen) + Newline (10) + Tab (9)\n                            if (code >= 32 && code <= 126 || code === 10 || code === 9) {\n                                result += char;\n                            } else {\n                                // Alle anderen Zeichen durch Leerzeichen ersetzen\n                                result += ' ';\n                            }\n                        }\n                        return result.replace(/\\s+/g, ' ').trim();\n                    };\n                    const cleanMessages = messages.map((message)=>{\n                        if (typeof message.content === 'string') {\n                            return {\n                                ...message,\n                                content: cleanText(message.content)\n                            };\n                        } else if (Array.isArray(message.content)) {\n                            // Für multimodale Nachrichten\n                            const cleanContent = message.content.map((part)=>{\n                                if (part.type === 'text' && typeof part.text === 'string') {\n                                    return {\n                                        ...part,\n                                        text: cleanText(part.text)\n                                    };\n                                }\n                                return part;\n                            });\n                            return {\n                                ...message,\n                                content: cleanContent\n                            };\n                        }\n                        return message;\n                    });\n                    console.log('Grok: Sending cleaned messages.');\n                    // Debug: Prüfe auf problematische Zeichen\n                    cleanMessages.forEach((msg, index)=>{\n                        const content = typeof msg.content === 'string' ? msg.content : Array.isArray(msg.content) ? msg.content.map((p)=>p.type === 'text' ? p.text : '[IMAGE]').join(' ') : '[UNKNOWN]';\n                        // Prüfe auf Zeichen außerhalb des ASCII-Bereichs\n                        for(let i = 0; i < content.length; i++){\n                            const char = content[i];\n                            const code = char.charCodeAt(0);\n                            if (code > 126 || code < 32) {\n                                console.log(`Found problematic character: \"${char}\" (code: ${code}) at position ${i} in message ${index}`);\n                            }\n                        }\n                    });\n                    const completion = await client.chat.completions.create({\n                        model: modelConfig.modelId,\n                        messages: cleanMessages,\n                        max_tokens: 2000,\n                        temperature: 0.7\n                    });\n                    return completion.choices[0]?.message?.content || 'No response generated';\n                } catch (grokError) {\n                    console.error('Grok API Error:', grokError);\n                    if (grokError instanceof Error) {\n                        throw new Error(`Grok API Error: ${grokError.message}`);\n                    }\n                    throw new Error('Grok API request failed');\n                }\n            }\n        case 'local':\n            {\n                const response = await fetch('http://localhost:11434/api/chat', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        model: modelConfig.modelId,\n                        messages,\n                        stream: false\n                    })\n                });\n                if (!response.ok) {\n                    throw new Error(`Local model request failed: ${response.statusText}`);\n                }\n                const data = await response.json();\n                return data.message?.content || 'No response generated';\n            }\n        default:\n            throw new Error(`Unsupported provider: ${modelConfig.provider}`);\n    }\n}\nasync function callLLM(modelId, apiKey, messages, options = {}) {\n    try {\n        const config = LLM_MODELS[modelId];\n        if (!config) {\n            throw new Error(`Unsupported model: ${modelId}`);\n        }\n        if (config.requiresApiKey && !validateApiKey(config.provider, apiKey)) {\n            throw new Error('Invalid API key format');\n        }\n        const client = await createLLMClient(modelId, apiKey);\n        return await generateResponse(client, config, messages, options.includeImages);\n    } catch (error) {\n        console.error(`LLM call failed for ${modelId}:`, error);\n        const config = LLM_MODELS[modelId];\n        if (config) {\n            throw error;\n        } else {\n            throw new Error(`Unknown model: ${modelId}`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/llmProviders.ts\n");

/***/ })

};
;