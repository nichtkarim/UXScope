/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/analyze/route";
exports.ids = ["app/api/analyze/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CUsers%5CKarim%5CDocuments%5CBachelorprojekt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CKarim%5CDocuments%5CBachelorprojekt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CUsers%5CKarim%5CDocuments%5CBachelorprojekt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CKarim%5CDocuments%5CBachelorprojekt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_Karim_Documents_Bachelorprojekt_src_app_api_analyze_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/analyze/route.ts */ \"(rsc)/./src/app/api/analyze/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/analyze/route\",\n        pathname: \"/api/analyze\",\n        filename: \"route\",\n        bundlePath: \"app/api/analyze/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\Karim\\\\Documents\\\\Bachelorprojekt\\\\src\\\\app\\\\api\\\\analyze\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Karim_Documents_Bachelorprojekt_src_app_api_analyze_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZhbmFseXplJTJGcm91dGUmcGFnZT0lMkZhcGklMkZhbmFseXplJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYW5hbHl6ZSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNLYXJpbSU1Q0RvY3VtZW50cyU1Q0JhY2hlbG9ycHJvamVrdCU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDS2FyaW0lNUNEb2N1bWVudHMlNUNCYWNoZWxvcnByb2pla3QmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ3FCO0FBQzhCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5R0FBbUI7QUFDM0M7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQXNEO0FBQzlEO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzBGOztBQUUxRiIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxLYXJpbVxcXFxEb2N1bWVudHNcXFxcQmFjaGVsb3Jwcm9qZWt0XFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGFuYWx5emVcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2FuYWx5emUvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9hbmFseXplXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9hbmFseXplL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcS2FyaW1cXFxcRG9jdW1lbnRzXFxcXEJhY2hlbG9ycHJvamVrdFxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxhbmFseXplXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgd29ya0FzeW5jU3RvcmFnZSxcbiAgICAgICAgd29ya1VuaXRBc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CUsers%5CKarim%5CDocuments%5CBachelorprojekt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CKarim%5CDocuments%5CBachelorprojekt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/analyze/route.ts":
/*!**************************************!*\
  !*** ./src/app/api/analyze/route.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_promptEngineering__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/promptEngineering */ \"(rsc)/./src/lib/promptEngineering.ts\");\n/* harmony import */ var _lib_llmProviders__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/llmProviders */ \"(rsc)/./src/lib/llmProviders.ts\");\n\n\n\nasync function POST(request) {\n    try {\n        const { image, context, userProfile } = await request.json();\n        // Extrahiere promptVariant, promptLanguage und uiMode aus context, falls vorhanden\n        const promptVariant = context?.promptVariant || 'advanced';\n        const promptLanguage = context?.language || 'de';\n        const uiMode = context?.uiMode || 'generalized';\n        console.log('🔍 Debug - Received context:', context);\n        console.log('🔍 Debug - Extracted promptVariant:', promptVariant);\n        console.log('🔍 Debug - Extracted promptLanguage:', promptLanguage);\n        console.log('🔍 Debug - Extracted uiMode:', uiMode);\n        // Validierung\n        if (!image && !context) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Bild oder Kontext erforderlich'\n            }, {\n                status: 400\n            });\n        }\n        if (!userProfile || !userProfile.selectedModel) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Benutzerprofil mit LLM-Modell erforderlich'\n            }, {\n                status: 400\n            });\n        }\n        // LLM-Konfiguration\n        const modelConfig = _lib_llmProviders__WEBPACK_IMPORTED_MODULE_2__.LLM_MODELS[userProfile.selectedModel];\n        if (!modelConfig) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: `Unbekanntes LLM-Modell: ${userProfile.selectedModel}`\n            }, {\n                status: 400\n            });\n        }\n        // API-Key-Validierung (außer für lokale LLMs)\n        if (modelConfig.requiresApiKey && !userProfile.apiKey) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: `API-Key für ${modelConfig.name} nicht konfiguriert`\n            }, {\n                status: 400\n            });\n        }\n        console.log(`🤖 Starte Analyse mit ${modelConfig.name}...`);\n        // Warnung für Vision-Fähigkeiten\n        if (image && !modelConfig.supportsVision) {\n            console.warn(`⚠️ ${modelConfig.name} unterstützt keine Bild-Analyse. Nur Text wird analysiert.`);\n        }\n        const startTime = Date.now();\n        // App-Kontext erstellen\n        const appContext = {\n            appDescription: context?.description || 'Unbekannte Anwendung',\n            userTask: context?.userTask || 'Allgemeine Usability-Evaluation',\n            screenshot: image || '',\n            viewName: context?.viewName || 'Hauptansicht',\n            sourceCode: context?.uiCode || ''\n        };\n        // Prompt generieren mit der korrekten Variante, Sprache und UI-Modus\n        const prompt = _lib_promptEngineering__WEBPACK_IMPORTED_MODULE_1__.PromptEngineer.createUsabilityPrompt(appContext, true, context?.customPrompt, promptVariant, promptLanguage, uiMode);\n        console.log('🔍 API Debug - Generated prompt length:', prompt.length);\n        console.log('🔍 API Debug - Prompt preview (first 300 chars):');\n        console.log(prompt.substring(0, 300) + '...');\n        // LLM aufrufen\n        const messages = [\n            {\n                role: 'user',\n                content: prompt\n            }\n        ];\n        if (image && modelConfig.supportsVision) {\n            messages[0].content = [\n                {\n                    type: 'text',\n                    text: prompt\n                },\n                {\n                    type: 'image_url',\n                    image_url: {\n                        url: image\n                    }\n                }\n            ];\n        }\n        const analysis = await (0,_lib_llmProviders__WEBPACK_IMPORTED_MODULE_2__.callLLM)(userProfile.selectedModel, userProfile.apiKey, messages);\n        const processingTime = Date.now() - startTime;\n        console.log(`✅ Analyse abgeschlossen mit ${modelConfig.name} in ${processingTime}ms`);\n        // Strukturierte Antwort für wissenschaftliche Auswertung\n        const scientificResponse = {\n            analysis,\n            metadata: {\n                llmModel: userProfile.selectedModel,\n                llmName: modelConfig.name,\n                promptUsed: prompt,\n                analysisTime: new Date().toISOString(),\n                processingTimeMs: processingTime,\n                supportsVision: modelConfig.supportsVision,\n                imageProvided: !!image,\n                contextProvided: !!context,\n                promptVariant,\n                userProfile: {\n                    name: userProfile.name,\n                    email: userProfile.email\n                }\n            }\n        };\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(scientificResponse);\n    } catch (error) {\n        console.error('❌ Analyse-Fehler:', error);\n        const errorMessage = error instanceof Error ? error.message : 'Unbekannter Fehler';\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: `Analyse fehlgeschlagen: ${errorMessage}`\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/analyze/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/llmProviders.ts":
/*!*********************************!*\
  !*** ./src/lib/llmProviders.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LLM_MODELS: () => (/* binding */ LLM_MODELS),\n/* harmony export */   callLLM: () => (/* binding */ callLLM),\n/* harmony export */   validateApiKey: () => (/* binding */ validateApiKey)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @anthropic-ai/sdk */ \"(rsc)/./node_modules/@anthropic-ai/sdk/index.mjs\");\n/* harmony import */ var together_ai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! together-ai */ \"(rsc)/./node_modules/together-ai/index.mjs\");\n\n\n\nconst LLM_MODELS = {\n    'gpt-4o': {\n        id: 'gpt-4o',\n        name: 'GPT-4o',\n        provider: 'openai',\n        requiresApiKey: true,\n        supportsVision: true,\n        modelId: 'gpt-4o'\n    },\n    'gpt-4o-mini': {\n        id: 'gpt-4o-mini',\n        name: 'GPT-4o Mini',\n        provider: 'openai',\n        requiresApiKey: true,\n        supportsVision: true,\n        modelId: 'gpt-4o-mini'\n    },\n    'claude-3-5-sonnet': {\n        id: 'claude-3-5-sonnet',\n        name: 'Claude 3.5 Sonnet',\n        provider: 'anthropic',\n        requiresApiKey: true,\n        supportsVision: true,\n        modelId: 'claude-3-5-sonnet-20241022'\n    },\n    'claude-3-haiku': {\n        id: 'claude-3-haiku',\n        name: 'Claude 3 Haiku',\n        provider: 'anthropic',\n        requiresApiKey: true,\n        supportsVision: true,\n        modelId: 'claude-3-haiku-20240307'\n    },\n    'llama-3.3-70b': {\n        id: 'llama-3.3-70b',\n        name: 'Llama 3.3 70B',\n        provider: 'together',\n        requiresApiKey: true,\n        supportsVision: false,\n        modelId: 'meta-llama/Llama-3.3-70B-Instruct-Turbo'\n    },\n    'llama-3.1-local': {\n        id: 'llama-3.1-local',\n        name: 'Llama 3.1 (Local)',\n        provider: 'local',\n        requiresApiKey: false,\n        supportsVision: false,\n        modelId: 'llama3.1'\n    }\n};\nconst validateApiKey = (provider, apiKey)=>{\n    if (!apiKey || apiKey.trim() === '') return false;\n    switch(provider){\n        case 'openai':\n            return apiKey.startsWith('sk-') && apiKey.length > 20;\n        case 'anthropic':\n            return apiKey.startsWith('sk-ant-') && apiKey.length > 20;\n        case 'together':\n            return apiKey.length > 20 && !apiKey.startsWith('sk-');\n        case 'local':\n            return true // Local models don't need API keys\n            ;\n        default:\n            return false;\n    }\n};\nconst callLLM = async (modelId, apiKey, messages, options = {})=>{\n    const config = LLM_MODELS[modelId];\n    if (!config) {\n        throw new Error(`Unsupported model: ${modelId}`);\n    }\n    if (config.requiresApiKey && !validateApiKey(config.provider, apiKey)) {\n        throw new Error('Invalid API key');\n    }\n    switch(config.provider){\n        case 'openai':\n            return await callOpenAI(config.modelId, apiKey, messages, options);\n        case 'anthropic':\n            return await callAnthropic(config.modelId, apiKey, messages, options);\n        case 'together':\n            return await callTogether(config.modelId, apiKey, messages, options);\n        case 'local':\n            return await callLocal(config.modelId, messages, options);\n        default:\n            throw new Error(`Unsupported provider: ${config.provider}`);\n    }\n};\nasync function callOpenAI(model, apiKey, messages, options) {\n    const openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n        apiKey\n    });\n    const response = await openai.chat.completions.create({\n        model,\n        messages,\n        temperature: options.temperature || 0.7,\n        max_tokens: options.max_tokens || 2000\n    });\n    return response.choices[0]?.message?.content || '';\n}\nasync function callAnthropic(model, apiKey, messages, options) {\n    const anthropic = new _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n        apiKey\n    });\n    // Convert OpenAI format to Anthropic format\n    const systemMessage = messages.find((m)=>m.role === 'system');\n    const userMessages = messages.filter((m)=>m.role !== 'system');\n    const response = await anthropic.messages.create({\n        model,\n        max_tokens: options.max_tokens || 2000,\n        system: systemMessage?.content || '',\n        messages: userMessages,\n        temperature: options.temperature || 0.7\n    });\n    return response.content[0]?.type === 'text' ? response.content[0].text : '';\n}\nasync function callTogether(model, apiKey, messages, options) {\n    const together = new together_ai__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n        apiKey\n    });\n    const response = await together.chat.completions.create({\n        model,\n        messages,\n        temperature: options.temperature || 0.7,\n        max_tokens: options.max_tokens || 2000\n    });\n    return response.choices[0]?.message?.content || '';\n}\nasync function callLocal(model, messages, options) {\n    // Call local Ollama instance\n    const response = await fetch('http://localhost:11434/api/chat', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            model,\n            messages,\n            stream: false,\n            options: {\n                temperature: options.temperature || 0.7,\n                num_predict: options.max_tokens || 2000\n            }\n        })\n    });\n    if (!response.ok) {\n        throw new Error(`Local LLM error: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data.message?.content || '';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/llmProviders.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/promptEngineering.ts":
/*!**************************************!*\
  !*** ./src/lib/promptEngineering.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModelSpecificPrompts: () => (/* binding */ ModelSpecificPrompts),\n/* harmony export */   PromptEngineer: () => (/* binding */ PromptEngineer),\n/* harmony export */   ResponseValidator: () => (/* binding */ ResponseValidator)\n/* harmony export */ });\nclass PromptEngineer {\n    static{\n        /**\r\n   * A/B/C Testing Konfiguration für Prompt-Varianten mit UI-Technologie-Modi\r\n   * \r\n   * FORSCHUNGS-HINWEIS:\r\n   * Diese Implementierung ermöglicht das Testen dreier wissenschaftlich fundierter Prompt-Ansätze\r\n   * mit zusätzlicher Wahl zwischen originalgetreuer SwiftUI-Fokussierung und generalisierter UI-Bewertung:\r\n   * \r\n   * A. \"STUDY-PURE\" - Originale IEEE-Studie \"Does GenAI Make Usability Testing Obsolete?\"\r\n   *    SwiftUI-Only Modus:\r\n   *    - Exakte Replikation der Originalstudie (Prof. Femmer Empfehlung)\r\n   *    - Nur für iOS/SwiftUI-Apps (wie in der ursprünglichen Forschung)\r\n   *    - Direkte Vergleichbarkeit mit publizierten Ergebnissen\r\n   *    - Methodisch konsistent und wissenschaftlich fundiert\r\n   *    \r\n   *    Generalisierter Modus:\r\n   *    - Systemübergreifendes Know-how zur UI-Bewertung\r\n   *    - Verschiedene UI-Technologien (SwiftUI, React, Flutter, HTML/CSS)\r\n   *    - Erweiterte Anwendbarkeit für moderne Forschungsrichtungen\r\n   *    - Unterstellt dem LLM breitere UI-Expertise\r\n   * \r\n   * B. \"BASIC\" - Adaptierte Version basierend auf UX-LLM Studie (IEEE Xplore: 11029918)\r\n   *    - Minimalistischer Ansatz mit einfacher Kategorisierung\r\n   *    - Kurze, prägnante Instruktionen\r\n   *    - Fokus auf offene Problemidentifikation\r\n   *    - Sprache wählbar (DE/EN)\r\n   * \r\n   * C. \"ADVANCED\" - Erweiterte Variante für Thesis-Level Analyse\r\n   *    - Detaillierte Expertise-Beschreibung mit wissenschaftlicher Kategorisierung\r\n   *    - Strukturierte Problemkategorien basierend auf Usability-Test-Ergebnissen\r\n   *    - Wissenschaftliche Analysemethodik mit Nielsen's Heuristiken\r\n   *    - Umfassende Qualitätskriterien und ISO-Standards\r\n   * \r\n   * UI-TECHNOLOGIE-MODI:\r\n   * - 'swiftui-only': Originalgetreu für direkte Studienreplikation (empfohlen für STUDY-PURE)\r\n   * - 'generalized': Systemübergreifend für moderne Multi-Platform-Anwendungen\r\n   * \r\n   * Verwendung für A/B/C Testing:\r\n   * - Verwende 'STUDY-PURE' + 'swiftui-only' für exakte IEEE-Studien-Replikation\r\n   * - Verwende 'STUDY-PURE' + 'generalized' für erweiterte Anwendbarkeit\r\n   * - Verwende 'BASIC' für vereinfachte deutsche/englische Evaluation\r\n   * - Verwende 'ADVANCED' für detaillierte wissenschaftliche Thesis-Analyse\r\n   * - Dokumentiere Ergebnisse aller Varianten für empirische Auswertung\r\n   */ this.PROMPT_VARIANTS = {\n            STUDY_PURE: 'study-pure',\n            BASIC: 'basic',\n            ADVANCED: 'advanced' // C: Erweitert, thesis-level\n        };\n    }\n    /**\r\n   * Erstellt einen strukturierten Prompt für die Usability-Analyse\r\n   * mit Persona-Instruktion und klarer Inputgestaltung\r\n   * \r\n   * @param appContext - App-Kontext für die Analyse\r\n   * @param includeExamples - Ob Beispiele inkludiert werden sollen\r\n   * @param customPrompt - Benutzerdefinierte Zusatzanweisungen\r\n   * @param variant - Prompt-Variante für A/B/C Testing ('study-pure', 'basic' oder 'advanced')\r\n   * @param language - Sprache der Prompts ('de' für Deutsch, 'en' für Englisch)\r\n   * @param uiMode - 'swiftui-only' für originalgetreue Studie oder 'generalized' für verschiedene UI-Technologien\r\n   */ static createUsabilityPrompt(appContext, includeExamples = false, customPrompt, variant = 'advanced', language = 'de', uiMode = 'generalized') {\n        console.log('🔍 PromptEngineer Debug - Creating prompt with variant:', variant, 'UI mode:', uiMode);\n        // Für STUDY-PURE: Nur System-Prompt + User-Input (originalgetreu)\n        if (variant === 'study-pure') {\n            const systemPrompt = this.getStudyPureSystemPrompt(language, uiMode);\n            const userInput = this.formatStudyPureInput(appContext, language, uiMode);\n            console.log('🔍 PromptEngineer Debug - STUDY-PURE: System prompt length:', systemPrompt.length);\n            console.log('🔍 PromptEngineer Debug - STUDY-PURE: User input length:', userInput.length);\n            console.log('🔍 PromptEngineer Debug - STUDY-PURE: Language:', language, 'UI Mode:', uiMode);\n            // Für STUDY-PURE werden keine Custom-Prompts, Beispiele oder zusätzliche Instruktionen verwendet\n            // um die Originalität der IEEE-Studie zu bewahren\n            return `${systemPrompt}\n\n${userInput}`;\n        }\n        // Für andere Varianten: Vollständige Struktur\n        const systemPrompt = variant === 'basic' ? this.getBasicSystemPrompt(language) : this.getAdvancedSystemPrompt(language);\n        const structuredInput = this.formatStructuredInput(appContext, variant, language);\n        const examples = includeExamples ? this.getExamples(language) : '';\n        const instructions = variant === 'basic' ? this.getBasicInstructions(language) : this.getAdvancedInstructions(language);\n        console.log('🔍 PromptEngineer Debug - Selected system prompt type:', variant);\n        console.log('🔍 PromptEngineer Debug - System prompt length:', systemPrompt.length);\n        console.log('🔍 PromptEngineer Debug - Instructions length:', instructions.length);\n        // Benutzerdefinierte Prompt einbinden, falls vorhanden\n        const customInstructions = customPrompt ? this.formatCustomPrompt(customPrompt, language) : '';\n        const finalPrompt = `${systemPrompt}\n\n${examples}\n\n${structuredInput}\n\n${instructions}\n\n${customInstructions}`;\n        console.log('🔍 PromptEngineer Debug - Final prompt length:', finalPrompt.length);\n        console.log('🔍 PromptEngineer Debug - Final prompt preview (first 200 chars):', finalPrompt.substring(0, 200) + '...');\n        return finalPrompt;\n    }\n    /**\r\n   * Formatiert die benutzerdefinierte Prompt\r\n   */ static formatCustomPrompt(customPrompt, language = 'de') {\n        if (language === 'en') {\n            return `\n<additional_requirements>\nAdditionally consider the following specific user requirements:\n\n${customPrompt}\n\nIntegrate these requirements into your analysis and pay special attention to these aspects.\n</additional_requirements>`;\n        }\n        return `\n<zusaetzliche_anforderungen>\nBerücksichtige zusätzlich folgende spezifische Anforderungen des Benutzers:\n\n${customPrompt}\n\nIntegriere diese Anforderungen in deine Analyse und gehe besonders auf diese Aspekte ein.\n</zusaetzliche_anforderungen>`;\n    }\n    /**\r\n   * STUDY-PURE System-Prompt basierend auf IEEE-Studie \"Does GenAI Make Usability Testing Obsolete?\"\r\n   * Originalgetreue Replikation der in der Studie verwendeten Prompts (auf Englisch)\r\n   * Jetzt auch mit deutscher Übersetzung verfügbar\r\n   * \r\n   * @param language - Sprache des Prompts\r\n   * @param uiMode - 'swiftui-only' für originalgetreue Studie oder 'generalized' für verschiedene UI-Technologien\r\n   */ static getStudyPureSystemPrompt(language = 'en', uiMode = 'swiftui-only') {\n        if (language === 'de') {\n            if (uiMode === 'swiftui-only') {\n                return `Du bist ein UX-Experte für mobile iOS-Apps mit SwiftUI.\nDeine Aufgabe ist es, Usability-Probleme anhand der \nInformationen zu identifizieren, die du über eine SwiftUI-App-Ansicht erhältst.\nEin Beispiel für ein Usability-Problem könnte sein: 'Fehlendes\nvisuelles Feedback bei Nutzerinteraktionen'.\nAntworte in der Sprache der App-Domäne; du darfst keine\ntechnische Terminologie verwenden oder Code-Details erwähnen.\nZähle die identifizierten Probleme auf; füge nach jeder \nAufzählung einen leeren Absatz hinzu; kein vorangestellter\noder nachfolgender Text.`;\n            } else {\n                return `Du bist ein UX-Experte für mobile Apps und Webanwendungen.\nDeine Aufgabe ist es, Usability-Probleme anhand der \nInformationen zu identifizieren, die du über eine App-Ansicht erhältst.\nDu verfügst über systemübergreifendes Know-how zur UI-Bewertung \nfür verschiedene Technologien (SwiftUI, React, Flutter, etc.).\nEin Beispiel für ein Usability-Problem könnte sein: 'Fehlendes\nvisuelles Feedback bei Nutzerinteraktionen'.\nAntworte in der Sprache der App-Domäne; du darfst keine\ntechnische Terminologie verwenden oder Code-Details erwähnen.\nZähle die identifizierten Probleme auf; füge nach jeder \nAufzählung einen leeren Absatz hinzu; kein vorangestellter\noder nachfolgender Text.`;\n            }\n        }\n        if (uiMode === 'swiftui-only') {\n            return `You are a UX expert for mobile iOS apps with SwiftUI.\nYour task is to identify usability issues with the\ninformation you get for a SwiftUI app's view.\nAn example of a usability issue could be: 'Lack of\nvisual feedback on user interactions'.\nRespond using app domain language; you must not use\ntechnical terminology or mention code details.\nEnumerate the problems identified; add an empty\nparagraph after each enumeration; no preceding\nor following text.`;\n        } else {\n            return `You are a UX expert for mobile apps and web applications.\nYour task is to identify usability issues with the\ninformation you get for an app's view.\nYou have cross-platform expertise in UI evaluation \nfor various technologies (SwiftUI, React, Flutter, etc.).\nAn example of a usability issue could be: 'Lack of\nvisual feedback on user interactions'.\nRespond using app domain language; you must not use\ntechnical terminology or mention code details.\nEnumerate the problems identified; add an empty\nparagraph after each enumeration; no preceding\nor following text.`;\n        }\n    }\n    /**\r\n   * BASIC System-Prompt basierend auf UX-LLM Studie (IEEE Xplore: 11029918)\r\n   * Minimalistische Instruktionen für studienkonformen Ansatz\r\n   */ static getBasicSystemPrompt(language = 'de') {\n        if (language === 'en') {\n            return `You are a UX expert for mobile apps. Your task is to identify usability issues based on the information you get about an app view. An example of a usability issue could be: 'Lack of visual feedback on user interactions'.\n\nRespond using app domain language; you must not use technical terminology or mention code details. Enumerate the problems identified; add an empty paragraph after each enumeration; no preceding or following text.`;\n        }\n        return `Du bist ein UX-Experte für mobile Apps. Deine Aufgabe ist es, Usability-Probleme basierend auf den Informationen über eine App-Ansicht zu identifizieren. Ein Beispiel für ein Usability-Problem könnte sein: 'Fehlendes visuelles Feedback bei Nutzerinteraktionen'.\n\nAntworte in der App-Domänen-Sprache; verwende keine technische Terminologie und erwähne keine Code-Details. Zähle die identifizierten Probleme auf; füge einen leeren Absatz nach jeder Aufzählung hinzu; keine einleitenden oder abschließenden Texte.`;\n    }\n    /**\r\n   * ADVANCED System-Prompt für detaillierte Thesis-Level Analyse\r\n   * Umfassende Expertise-Beschreibung mit wissenschaftlicher Fundierung\r\n   * Subtile Integration von Nielsen's Heuristiken und ISO-Standards als Bewertungskriterien\r\n   */ static getAdvancedSystemPrompt(language = 'de') {\n        if (language === 'en') {\n            return this.getAdvancedSystemPromptEN();\n        }\n        return `Du bist ein erfahrener UX-Experte mit spezialisierter Expertise in der mobilen App-Evaluation. Deine Aufgabe ist es, Usability-Probleme systematisch zu identifizieren und zu bewerten, basierend auf etablierten UX-Prinzipien und wissenschaftlichen Erkenntnissen.\n\n## Deine Expertise umfasst:\n• **Mobile Usability**: Spezialkenntnisse in iOS und Android Interface-Guidelines\n• **Visuelle Hierarchie**: Analyse von Kontrasten, Typografie und Layout-Strukturen  \n• **Interaktionsdesign**: Bewertung von Touch-Targets, Feedback-Mechanismen und Mikrointeraktionen\n• **Barrierefreiheit**: WCAG 2.1 Compliance und assistive Technologien\n• **Nutzerpsychologie**: Mentale Modelle, kognitive Belastung und Aufmerksamkeitsführung\n• **Benutzerführung**: Analyse von Arbeitsabläufen, Lernbarkeit und Nutzerautonomie\n\n## Analysemethodik (basierend auf UX-LLM Forschung):\n**Fokussiere auf folgende bewährte Problemkategorien:**\n\n### Visuelle und Wahrnehmungsprobleme:\n- Kontrast-Probleme zwischen Text und Hintergrund\n- Inkonsistente Farbschemata oder Theme-Behandlung\n- Fehlende visuelle Hierarchie oder Informationsarchitektur\n- Unleserliche oder zu kleine Schriftgrößen\n- Problematische Icon-Verwendung ohne Beschriftung\n\n### Interaktions- und Feedback-Probleme:\n- Fehlendes visuelles Feedback bei Nutzerinteraktionen\n- Unklare oder mehrdeutige Bedienelemente\n- Zu kleine Touch-Targets (unter 44px)\n- Inkonsistente Interaktionsmuster\n- Fehlende oder verwirrende Loading-States\n\n### Navigation und Orientierungsprobleme:\n- Unklare Navigation oder Informationsarchitektur\n- Fehlende Orientierungshilfen (Breadcrumbs, Progress-Indikatoren)\n- Inkonsistente oder verwirrende Button-Beschriftungen\n- Problematische Back-Button-Funktionalität\n- Mehrdeutige oder versteckte Funktionen\n\n### Inhalts- und Verständlichkeitsprobleme:\n- Unklare oder fehlende Beschreibungen\n- Inkonsistente Terminologie\n- Fehlende Pflichtfeld-Kennzeichnung\n- Informationsüberladung oder unstrukturierte Inhalte\n- Fehlende Hilfestellungen oder Kontextinformationen\n\n### Effizienz und Kontrolle:\n- Umständliche oder ineffiziente Arbeitsabläufe\n- Fehlende Shortcuts oder Abkürzungen für wiederkehrende Aufgaben\n- Unzureichende Nutzerführung bei komplexen Prozessen\n- Fehlende Undo-/Redo-Funktionalität\n- Mangelnde Anpassungsmöglichkeiten an Nutzerpräferenzen\n\n### Fehlerbehandlung und Prävention:\n- Fehlende Eingabevalidierung oder unklare Fehlermeldungen\n- Unzureichende Fehlerprävention bei kritischen Aktionen\n- Fehlende Bestätigungsdialoge bei wichtigen Entscheidungen\n- Schwer verständliche oder technische Fehlermeldungen\n- Fehlende Wiederherstellungsmöglichkeiten nach Fehlern\n\n### Konsistenz und Standards:\n- Abweichungen von etablierten Plattform-Konventionen\n- Inkonsistente Terminologie oder Beschriftungen\n- Widersprüchliche Interaktionsmuster innerhalb der App\n- Fehlende Übereinstimmung mit mentalen Modellen der Nutzer\n- Abweichungen von branchenüblichen Standards\n\n### Accessibility und Inklusion:\n- Probleme für Nutzer mit Sehbehinderungen\n- Fehlende alternative Texte oder Labels\n- Problematische Farbkodierung als einzige Information\n- Mangelnde Keyboard-Navigation Support\n- Unzureichende Unterstützung für assistive Technologien\n\n## Wichtige Analyse-Prinzipien:\n- **Nutzerorientiert**: Beschreibe Probleme aus Sicht echter Nutzer, nicht aus technischer Sicht\n- **Konkret und spezifisch**: Referenziere spezifische UI-Elemente und deren Probleme\n- **Kontextbezogen**: Berücksichtige verschiedene Nutzungsszenarien und Nutzergruppen\n- **Evidenzbasiert**: Begründe jedes Problem mit nachvollziehbaren Auswirkungen\n- **Lösungsorientiert**: Impliziere praktische Verbesserungsmöglichkeiten\n\n## Ausgabeformat:\nStrukturiere deine Analyse klar und prägnant:\n1. Identifiziere Probleme ohne Nummerierung oder Bulletpoints\n2. Beschreibe jedes Problem in einem eigenständigen Absatz\n3. Verwende klare, verständliche Sprache ohne Fachbegriffe\n4. Füge nach jedem Problem eine Leerzeile ein\n5. Vermeide einleitende oder abschließende Texte\n\nFokussiere auf die wichtigsten und wirkungsvollsten Usability-Probleme, die echte Nutzer in realen Situationen beeinträchtigen würden.`;\n    }\n    /**\r\n   * ADVANCED System-Prompt für detaillierte Thesis-Level Analyse (Englisch)\r\n   * Umfassende Expertise-Beschreibung mit wissenschaftlicher Fundierung\r\n   * Subtile Integration von Nielsen's Heuristiken und ISO-Standards als Bewertungskriterien\r\n   */ static getAdvancedSystemPromptEN() {\n        return `You are an experienced UX expert with specialized expertise in mobile app evaluation. Your task is to systematically identify and assess usability issues based on established UX principles and scientific findings.\n\n## Your expertise includes:\n• **Mobile Usability**: Specialized knowledge of iOS and Android interface guidelines\n• **Visual Hierarchy**: Analysis of contrasts, typography, and layout structures  \n• **Interaction Design**: Evaluation of touch targets, feedback mechanisms, and micro-interactions\n• **Accessibility**: WCAG 2.1 compliance and assistive technologies\n• **User Psychology**: Mental models, cognitive load, and attention guidance\n• **User Guidance**: Analysis of workflows, learnability, and user autonomy\n\n## Analysis methodology (based on UX-LLM research):\n**Focus on the following proven problem categories:**\n\n### Visual and Perception Problems:\n- Contrast issues between text and background\n- Inconsistent color schemes or theme handling\n- Missing visual hierarchy or information architecture\n- Illegible or too small font sizes\n- Problematic icon usage without labels\n\n### Interaction and Feedback Problems:\n- Lack of visual feedback on user interactions\n- Unclear or ambiguous controls\n- Too small touch targets (below 44px)\n- Inconsistent interaction patterns\n- Missing or confusing loading states\n\n### Navigation and Orientation Problems:\n- Unclear navigation or information architecture\n- Missing orientation aids (breadcrumbs, progress indicators)\n- Inconsistent or confusing button labels\n- Problematic back button functionality\n- Ambiguous or hidden features\n\n### Content and Comprehensibility Problems:\n- Unclear or missing descriptions\n- Inconsistent terminology\n- Missing mandatory field indicators\n- Information overload or unstructured content\n- Missing help or context information\n\n### Efficiency and Control:\n- Cumbersome or inefficient workflows\n- Missing shortcuts or abbreviations for recurring tasks\n- Insufficient user guidance for complex processes\n- Missing undo/redo functionality\n- Lack of customization options for user preferences\n\n### Error Handling and Prevention:\n- Missing input validation or unclear error messages\n- Insufficient error prevention for critical actions\n- Missing confirmation dialogs for important decisions\n- Hard-to-understand or technical error messages\n- Missing recovery options after errors\n\n### Consistency and Standards:\n- Deviations from established platform conventions\n- Inconsistent terminology or labeling\n- Contradictory interaction patterns within the app\n- Lack of alignment with users' mental models\n- Deviations from industry standards\n\n### Accessibility and Inclusion:\n- Problems for users with visual impairments\n- Missing alternative texts or labels\n- Problematic color coding as the only information\n- Lack of keyboard navigation support\n- Insufficient support for assistive technologies\n\n## Important Analysis Principles:\n- **User-centered**: Describe problems from the perspective of real users, not from a technical perspective\n- **Concrete and specific**: Reference specific UI elements and their problems\n- **Contextual**: Consider different usage scenarios and user groups\n- **Evidence-based**: Justify each problem with understandable effects\n- **Solution-oriented**: Imply practical improvement possibilities\n\n## Output format:\nStructure your analysis clearly and concisely:\n1. Identify problems without numbering or bullet points\n2. Describe each problem in a separate paragraph\n3. Use clear, understandable language without technical terms\n4. Add a blank line after each enumeration\n5. Avoid introductory or concluding texts\n\nFocus on the most important and effective usability problems that real users would be hindered by in real situations.`;\n    }\n    /**\r\n   * STUDY-PURE Instructions basierend auf IEEE-Studie \"Does GenAI Make Usability Testing Obsolete?\"\r\n   * Keine zusätzlichen Instruktionen - die Eingabe spricht für sich selbst wie in der Originalstudie\r\n   */ static getStudyPureInstructions() {\n        return '' // Keine zusätzlichen Instruktionen im originalen Format\n        ;\n    }\n    /**\r\n   * BASIC Instructions basierend auf UX-LLM Studie (IEEE Xplore: 11029918)\r\n   * Minimale, offene Problemidentifikation ohne strukturelle Zwänge\r\n   */ static getBasicInstructions(language = 'de') {\n        if (language === 'en') {\n            return `Analyze the provided app view and identify usability issues. Focus on problems that would affect real users in actual usage scenarios.\n\nDescribe each problem in a separate paragraph with an empty line between problems. Use domain-specific language and avoid technical terminology.\n\n## IMPORTANT: Categorization of Findings\nEach finding MUST begin with one of the following assessments:\n\n**[CATASTROPHIC]** - Severe problems that make the app unusable\n**[CRITICAL]** - Serious problems that strongly impair usability\n**[SERIOUS]** - Significant problems that worsen user experience\n**[MINOR]** - Smaller problems with minor effects\n**[POSITIVE]** - Positive aspects of the user interface\n\nExample: **[CRITICAL]** Missing visual feedback makes users uncertain about their interactions.`;\n        }\n        return `Analysiere die bereitgestellte App-Ansicht und identifiziere Usability-Probleme. Konzentriere dich auf Probleme, die echte Nutzer in tatsächlichen Nutzungsszenarien beeinträchtigen würden.\n\nBeschreibe jedes Problem in einem separaten Absatz mit einer Leerzeile zwischen den Problemen. Verwende domänenspezifische Sprache und vermeide technische Terminologie.\n\n## WICHTIG: Kategorisierung der Befunde\nJeder Befund MUSS mit einer der folgenden Bewertungen beginnen:\n\n**[KATASTROPHAL]** - Schwerwiegende Probleme, die die App unbrauchbar machen\n**[KRITISCH]** - Schwere Probleme, die die Nutzerfreundlichkeit stark beeinträchtigen\n**[ERNST]** - Erhebliche Probleme, die die Nutzererfahrung verschlechtern\n**[GERING]** - Kleinere Probleme mit geringfügigen Auswirkungen\n**[POSITIV]** - Positive Aspekte der Benutzeroberfläche\n\nBeispiel: **[KRITISCH]** Fehlendes visuelles Feedback macht Nutzer unsicher über ihre Interaktionen.`;\n    }\n    /**\r\n   * ADVANCED Instructions für detaillierte wissenschaftliche Analyse\r\n   * Umfassende Anweisungen für systematische Problemidentifikation\r\n   */ static getAdvancedInstructions(language = 'de') {\n        if (language === 'en') {\n            return `<instructions>\nAnalyze the provided app view and identify usability issues based on the app domain and user perspective.\n\n## Structured Input Analysis:\nYou will receive the following information:\n- **App Description**: Context and purpose of the application\n- **User Task**: Main goal of interaction with this view  \n- **View Name**: Name of the current screen view\n- **Source Code**: SwiftUI/React/Other code of the view (if available)\n- **Screenshot**: Visual state of the application\n\n## Analysis Focus (based on UX-LLM Research):\nFocus on problems that affect **real users in actual situations**:\n\n### Visual Perception:\n- Color contrasts and readability in different lighting conditions\n- Font sizes and their scalability  \n- Visual hierarchy and information architecture\n- Icon comprehensibility without text labels\n\n### Interaction and Feedback:\n- Visual feedback on user interactions\n- Touch target sizes (minimum 44px for mobile devices)\n- Loading states and wait time indicators\n- Clarity of interactive elements\n\n### Navigation and Orientation:\n- Clarity of navigation structure\n- Orientation aids and progress indicators\n- Back button functionality and labeling\n- Discoverability of hidden functions\n\n### Content and Comprehensibility:\n- Clarity of descriptions and labels\n- Consistency in terminology and designations\n- Marking of required fields\n- Comprehensibility of error messages\n\n### Accessibility:\n- Support for users with visual impairments\n- Alternative texts and labels for screen readers\n- Keyboard navigation and assistive technologies\n- Color coding as the only source of information\n\n## Output Format (strictly follow):\n- **No introductory or concluding texts**\n- **Each problem in a standalone paragraph**\n- **One blank line after each problem**\n- **User-oriented language without technical jargon**\n- **No numbering or bullet points**\n- **Don't mention code details or technical terminology**\n\n## IMPORTANT: Categorization of Findings\nEach finding MUST begin with one of the following assessments:\n\n**[CATASTROPHIC]** - Existential threats, there is a risk of major damage to the user or organization. This assessment should only be given after consultation with management, never by the UX professional alone.\n**[CRITICAL]** - Test participants have given up or are very dissatisfied, or there is a risk of minor damage to the user\n**[SERIOUS]** - Significant delays or moderate dissatisfaction\n**[MINOR]** - Noticeable delays or minor dissatisfaction\n**[POSITIVE]** - Something that worked well in the current usability test or that test participants liked\n\nExample of correct format:\n**[CRITICAL]** Missing interaction hints make it difficult for users to understand which elements are clickable, causing test participants to give up.\n\n**[POSITIVE]** The color scheme is consistent and was well-received by test participants as it supports a clear visual hierarchy.\n\n**[SERIOUS]** Font sizes that are too small cause significant delays in reading and lead to moderate dissatisfaction in poor lighting conditions.\n\nConduct an open, exploratory problem identification without limiting the number of problems. Let yourself be guided by the provided input and identify the most important usability challenges for real users.\n</instructions>`;\n        }\n        return `<instructions>\nAnalysiere die bereitgestellte App-Ansicht und identifiziere Usability-Probleme basierend auf der App-Domäne und Nutzerperspektive.\n\n## Strukturierte Eingabe-Analyse:\nDu erhältst folgende Informationen:\n- **App-Beschreibung**: Kontext und Zweck der Anwendung\n- **Benutzeraufgabe**: Hauptziel der Interaktion mit dieser Ansicht  \n- **Ansichtsname**: Bezeichnung der aktuellen Bildschirmansicht\n- **Quellcode**: SwiftUI/React-Code/Anderer Code der Ansicht (falls verfügbar)\n- **Screenshot**: Visueller Zustand der Anwendung\n\n## Analysefokus (basierend auf UX-LLM Forschung):\nKonzentriere dich auf Probleme, die **echte Nutzer in realen Situationen** beeinträchtigen:\n\n### Visuelle Wahrnehmung:\n- Farbkontraste und Lesbarkeit bei verschiedenen Lichtverhältnissen\n- Schriftgrößen und deren Skalierbarkeit  \n- Visuelle Hierarchie und Informationsarchitektur\n- Icon-Verständlichkeit ohne Textlabels\n\n### Interaktion und Feedback:\n- Visuelles Feedback bei Benutzerinteraktionen\n- Touch-Target-Größen (minimum 44px für mobile Geräte)\n- Loading-States und Wartezeiten-Indikatoren\n- Eindeutigkeit von Bedienelementen\n\n### Navigation und Orientierung:\n- Klarheit der Navigationsstruktur\n- Orientierungshilfen und Fortschrittsanzeigen\n- Back-Button-Funktionalität und -beschriftung\n- Auffindbarkeit versteckter Funktionen\n\n### Inhalte und Verständlichkeit:\n- Klarheit von Beschreibungen und Labels\n- Konsistenz in Terminologie und Bezeichnungen\n- Kennzeichnung von Pflichtfeldern\n- Verständlichkeit von Fehlermeldungen\n\n### Barrierefreiheit:\n- Unterstützung für Nutzer mit Sehbehinderungen\n- Alternative Texte und Labels für Screen Reader\n- Keyboard-Navigation und assistive Technologien\n- Farbkodierung als einzige Informationsquelle\n\n## Ausgabeformat (strikt befolgen):\n- **Keine einleitende oder abschließende Texte**\n- **Jedes Problem in einem eigenständigen Absatz**\n- **Eine Leerzeile nach jedem Problem**\n- **Nutzerorientierte Sprache ohne Fachbegriffe**\n- **Keine Nummerierung oder Bulletpoints**\n- **Keine Code-Details oder technische Terminologie erwähnen**\n\n## WICHTIG: Kategorisierung der Befunde\nJeder Befund MUSS mit einer der folgenden Bewertungen beginnen:\n\n**[KATASTROPHAL]** - Existenzielle Bedrohungen, es besteht die Gefahr eines größeren Schadens für den Benutzer oder die Organisation. Diese Bewertung sollte nur nach Rücksprache mit dem Management vergeben werden, keinesfalls durch den UX Professional allein.\n**[KRITISCH]** - Die Testteilnehmer haben aufgegeben oder sind sehr unzufrieden, oder es besteht die Gefahr eines geringfügigen Schadens für den Benutzer\n**[ERNST]** - Erhebliche Verzögerungen oder mäßige Unzufriedenheit\n**[GERING]** - Spürbare Verzögerungen oder geringe Unzufriedenheit\n**[POSITIV]** - Etwas, das im Rahmen des aktuellen Usability-Tests gut funktioniert hat oder den Testteilnehmern gefallen hat\n\nBeispiel für korrektes Format:\n**[KRITISCH]** Fehlende Interaktionshinweise machen es für Nutzer schwierig zu verstehen, welche Elemente anklickbar sind, was dazu führt, dass Testteilnehmer aufgeben.\n\n**[POSITIV]** Die Farbgebung ist konsistent und hat den Testteilnehmern gut gefallen, da sie eine klare visuelle Hierarchie unterstützt.\n\n**[ERNST]** Zu kleine Schriftgrößen verursachen erhebliche Verzögerungen beim Lesen und führen zu mäßiger Unzufriedenheit bei schlechten Lichtverhältnissen.\n\nFühre eine offene, explorative Problemidentifikation durch ohne Begrenzung der Anzahl der Probleme. Lass dich von der bereitgestellten Eingabe leiten und identifiziere die wichtigsten Usability-Herausforderungen für echte Nutzer.\n</instructions>`;\n    }\n    /**\r\n   * Strukturierte Eingabe mit XML-ähnlichen Tags\r\n   * Basiert auf UX-LLM Studie: \"Use delimiters to clearly indicate distinct parts of the input\"\r\n   * Trennt verschiedene Informationskomponenten klar voneinander für bessere LLM-Verarbeitung\r\n   * \r\n   * @param appContext - Der App-Kontext\r\n   * @param variant - Die Prompt-Variante (bestimmt das Format)\r\n   */ static formatStructuredInput(appContext, variant, language = 'de') {\n        // Für STUDY-PURE verwenden wir das originale Format aus der IEEE-Studie\n        if (variant === 'study-pure') {\n            return this.formatStudyPureInput(appContext, language);\n        }\n        // Für andere Varianten verwenden wir das XML-ähnliche Format\n        if (language === 'en') {\n            return `<app_context>\n<app_overview>\n${appContext.appDescription}\n</app_overview>\n\n<user_task>\n${appContext.userTask}\n</user_task>\n\n<view_name>\n${appContext.viewName}\n</view_name>\n\n${appContext.sourceCode ? `<source_code>\n${appContext.sourceCode}\n</source_code>` : ''}\n</app_context>\n\n<image>\n[The provided image shows the current state of the application]\n</image>`;\n        }\n        return `<app_context>\n<app_overview>\n${appContext.appDescription}\n</app_overview>\n\n<user_task>\n${appContext.userTask}\n</user_task>\n\n<view_name>\n${appContext.viewName}\n</view_name>\n\n${appContext.sourceCode ? `<source_code>\n${appContext.sourceCode}\n</source_code>` : ''}\n</app_context>\n\n<image>\n[Das bereitgestellte Bild zeigt den aktuellen Zustand der Anwendung]\n</image>`;\n    }\n    /**\r\n   * Formatiert die Eingabe im originalen IEEE-Studien-Format\r\n   * Jetzt auch mit deutscher Übersetzung und UI-Modus verfügbar\r\n   * \r\n   * @param appContext - Der App-Kontext\r\n   * @param language - Sprache des Inputs\r\n   * @param uiMode - 'swiftui-only' für originalgetreue Studie oder 'generalized' für verschiedene UI-Technologien\r\n   */ static formatStudyPureInput(appContext, language = 'en', uiMode = 'swiftui-only') {\n        if (language === 'de') {\n            if (uiMode === 'swiftui-only') {\n                return `Ich habe eine iOS-App über: ${appContext.appDescription}\nDie Aufgabe des Nutzers in dieser App-Ansicht handelt von: ${appContext.userTask}.\nEin Bild der App-Ansicht wird bereitgestellt.\nUnten ist der unvollständige SwiftUI-Code für die App-\nAnsicht.\nDieser Code enthält die Benutzeroberfläche der Ansicht und ein\nView Model für die Logik-Behandlung.\nEr kann auch zusätzliche Komponenten wie\nUnteransichten, Modelle oder Vorschau-Code enthalten.\nQuellcode:\n${appContext.sourceCode || '[Kein Quellcode bereitgestellt]'}`;\n            } else {\n                return `Ich habe eine Anwendung über: ${appContext.appDescription}\nDie Aufgabe des Nutzers in dieser Ansicht handelt von: ${appContext.userTask}.\nEin Bild der Anwendung wird bereitgestellt.\nUnten ist der Quellcode für die Ansicht (falls verfügbar).\nDieser Code kann verschiedene UI-Technologien verwenden \n(SwiftUI, React, HTML/CSS, Flutter, etc.).\nQuellcode:\n${appContext.sourceCode || '[Kein Quellcode bereitgestellt]'}`;\n            }\n        }\n        if (uiMode === 'swiftui-only') {\n            return `I have an iOS app about: ${appContext.appDescription}\nThe user's task in this app view is about: ${appContext.userTask}.\nAn image of the app view is provided.\nBelow is the incomplete SwiftUI code for the app\nview.\nThis code includes the view's user interface and a\nview model for logic handling.\nIt may also include additional components like\nsubviews, models, or preview code.\nSource Code:\n${appContext.sourceCode || '[No source code provided]'}`;\n        } else {\n            return `I have an application about: ${appContext.appDescription}\nThe user's task in this view is about: ${appContext.userTask}.\nAn image of the application is provided.\nBelow is the source code for the view (if available).\nThis code may use various UI technologies \n(SwiftUI, React, HTML/CSS, Flutter, etc.).\nSource Code:\n${appContext.sourceCode || '[No source code provided]'}`;\n        }\n    }\n    /**\r\n   * Nutzerorientierte Beispiele für freie Problemidentifikation\r\n   * Basiert auf UX-LLM Studie: Offene Problemidentifikation ohne strukturelle Zwänge\r\n   * Nutzt One-Shot Prompting mit konkreten Beispielen aus der wissenschaftlichen Forschung\r\n   */ static getExamples(language = 'de') {\n        if (language === 'de') {\n            return `<examples>\n**Beispiel eines validen Usability-Problems (basierend auf UX-LLM Forschung):**\n\n\"Unzureichender Kontrast zwischen Text und Hintergrundfarbe: Der gelbe Hintergrund mit weißem Text bei den Kategorie-Buttons bietet möglicherweise nicht genügend Kontrast für Nutzer mit Sehbehinderungen oder bei hellem Licht.\"\n\n**Beispiel eines Interaktionsproblems:**\n\n\"Fehlendes visuelles Feedback beim Button-Druck: Die Kategorie-Buttons scheinen kein visuelles Feedback beim Antippen zu haben, was Nutzer unsicher machen könnte, ob ihre Eingabe registriert wurde.\"\n\n**Beispiel eines Navigationsproblems:**\n\n\"Fehlende klare Navigationshinweise: Es gibt keine klare Anzeige, wie nach einer Auswahl zur nächsten Frage fortgefahren werden kann, was zu Nutzerverwirrung führen könnte.\"\n\n**Beispiel eines Barrierefreiheitsproblems:**\n\n\"Unzureichende Touch-Targets: Der Button könnte eine unzureichende Touch-Target-Größe haben, was es für Nutzer schwierig machen könnte, präzise zu tippen, besonders auf kleineren Bildschirmen.\"\n\n**Beispiel eines Verständlichkeitsproblems:**\n\n\"Mehrdeutige Fortschrittsanzeige: Die Fortschrittsleiste hat keine Beschriftung oder Anzeige dessen, was sie repräsentiert, was zu Verwirrung über den Nutzerfortschritt führen könnte.\"\n</examples>`;\n        }\n        return `<examples>\n**Example of a valid usability problem (based on UX-LLM research):**\n\n\"Insufficient contrast between text and background color: The yellow background with white text on the category buttons may not provide enough contrast for users with visual impairments or when viewing in bright light conditions.\"\n\n**Example of an interaction problem:**\n\n\"No visual feedback on button press: The category buttons do not appear to have any visual feedback when tapped, which could leave users uncertain whether their input has been registered.\"\n\n**Example of a navigation problem:**\n\n\"Lack of clear navigation cues: There is no clear indication of how to proceed to the next question after a selection is made, which could lead to user confusion.\"\n\n**Example of an accessibility problem:**\n\n\"Inadequate touch targets: The button may have an inadequate touch target size, which could make it difficult for users to tap accurately, especially on devices with smaller screens.\"\n\n**Example of a comprehensibility problem:**\n\n\"Ambiguous progress bar: The progress bar does not have a label or any indication of what it represents, which could lead to confusion about the user's progress.\"\n</examples>`;\n    }\n    /**\r\n   * Erstellt einen spezifischen Prompt für die iterative Optimierung\r\n   * Verwendet bei der Prompt-Verfeinerung während der Datengenerierung\r\n   * Kritischer Schritt im Prompt Engineering zur kontinuierlichen Verbesserung\r\n   */ static createRefinedPrompt(appContext, previousIssues) {\n        const basePrompt = this.createUsabilityPrompt(appContext, false);\n        const refinements = this.getRefinements(previousIssues);\n        return `${basePrompt}\n\n${refinements}`;\n    }\n    /**\r\n   * Verfeinerungen basierend auf vorherigen Iterationen\r\n   * Systematische Anpassungen um Qualität der LLM-Ausgaben zu steigern\r\n   */ static getRefinements(previousIssues) {\n        return `<refinements>\nBerücksichtige folgende Punkte aus vorherigen Analysen:\n${previousIssues.map((issue)=>`- ${issue}`).join('\\n')}\n\nVermeide häufige Probleme:\n- Wiederholung bereits genannter Probleme\n- Zu allgemeine oder vage Aussagen (\"schlechte Navigation\")\n- Spekulative Probleme ohne klare Evidenz\n- Technische Details, die nicht nutzerzentriert sind\n- Irrelevante Informationen außerhalb der Usability-Bewertung\n- Halluzinationen von nicht vorhandenen UI-Elementen\n\nFokussiere stattdessen auf:\n- Spezifische, nachvollziehbare Probleme\n- Direkte Auswirkungen auf die Benutzererfahrung\n- Konkrete Verbesserungsvorschläge\n</refinements>`;\n    }\n    /**\r\n   * A/B/C Testing Utility für einfache Prompt-Varianten-Auswahl\r\n   * Bietet eine einfache Schnittstelle für das Testen aller drei Varianten\r\n   * \r\n   * @param appContext - App-Kontext für die Analyse\r\n   * @param variant - Welche Variante verwendet werden soll\r\n   * @param includeExamples - Ob Beispiele inkludiert werden sollen\r\n   * @param customPrompt - Optionale benutzerdefinierte Zusatzanweisungen\r\n   * @param language - Sprache der Prompts\r\n   * @param uiMode - UI-Technologie-Modus\r\n   * @returns Strukturierter Prompt für die gewählte Variante\r\n   */ static createABCTestPrompt(appContext, variant = 'advanced', includeExamples = false, customPrompt, language = 'de', uiMode = 'generalized') {\n        return this.createUsabilityPrompt(appContext, includeExamples, customPrompt, variant, language, uiMode);\n    }\n    /**\r\n   * Legacy A/B Testing Utility - behält Kompatibilität bei\r\n   */ static createABTestPrompt(appContext, testPure = false, includeExamples = false, customPrompt, language = 'de', uiMode = 'generalized') {\n        const variant = testPure ? 'basic' : 'advanced';\n        return this.createUsabilityPrompt(appContext, includeExamples, customPrompt, variant, language, uiMode);\n    }\n    /**\r\n   * Erstellt alle drei Prompt-Varianten für direkten Vergleich\r\n   * Nützlich für die wissenschaftliche Auswertung und Dokumentation\r\n   * \r\n   * @param appContext - App-Kontext für die Analyse\r\n   * @param includeExamples - Ob Beispiele inkludiert werden sollen\r\n   * @param customPrompt - Optionale benutzerdefinierte Zusatzanweisungen\r\n   * @param language - Sprache der Prompts\r\n   * @param uiMode - UI-Technologie-Modus\r\n   * @returns Objekt mit allen drei Prompt-Varianten\r\n   */ static createAllVariants(appContext, includeExamples = false, customPrompt, language = 'de', uiMode = 'generalized') {\n        return {\n            studyPure: this.createUsabilityPrompt(appContext, includeExamples, customPrompt, 'study-pure', language, uiMode),\n            basic: this.createUsabilityPrompt(appContext, includeExamples, customPrompt, 'basic', language, uiMode),\n            advanced: this.createUsabilityPrompt(appContext, includeExamples, customPrompt, 'advanced', language, uiMode)\n        };\n    }\n    /**\r\n   * Legacy-Kompatibilität: Erstellt beide ursprüngliche Varianten\r\n   */ static createBothVariants(appContext, includeExamples = false, customPrompt, language = 'de', uiMode = 'generalized') {\n        return {\n            basic: this.createUsabilityPrompt(appContext, includeExamples, customPrompt, 'basic', language, uiMode),\n            advanced: this.createUsabilityPrompt(appContext, includeExamples, customPrompt, 'advanced', language, uiMode)\n        };\n    }\n}\n/**\r\n * Prompt-Varianten für verschiedene LLM-Modelle\r\n * Ermöglicht modellspezifische Optimierungen basierend auf Stärken der LLMs\r\n */ const ModelSpecificPrompts = {\n    'gpt4o': {\n        systemRole: 'Als multimodaler UX-Experte mit Fokus auf visueller Analyse, nutze deine Fähigkeiten zur detaillierten Bild- und Textanalyse für eine umfassende Usability-Bewertung. Analysiere sowohl die visuellen Elemente als auch die strukturellen Aspekte der Benutzeroberfläche.',\n        focusAreas: [\n            'Visuelle Hierarchie',\n            'Interaktionsdesign',\n            'Multimodale Konsistenz',\n            'Ästhetische Bewertung',\n            'Informationsarchitektur'\n        ],\n        additionalInstructions: 'Nutze deine visuellen Analysefähigkeiten, um detaillierte Bewertungen zu Farben, Typografie, Layoutstrukturen und visuellen Affordanzen zu geben.'\n    },\n    'claude4': {\n        systemRole: 'Als UX-Experte mit Fokus auf analytische Tiefe und längere Kontexte, nutze deine Fähigkeit zur Verarbeitung komplexer Informationen für eine strukturierte, wissenschaftlich fundierte Analyse mit ausführlichen Begründungen.',\n        focusAreas: [\n            'Nutzerflow-Analyse',\n            'Kognitive Belastung',\n            'Konsistenz-Prüfung',\n            'Detaillierte Heuristik-Bewertung',\n            'Kontextübergreifende Probleme',\n            'Wissenschaftliche Fundierung'\n        ],\n        additionalInstructions: 'Führe eine tiefgehende Analyse durch mit ausführlichen Begründungen, wissenschaftlichen Referenzen und detaillierten Bewertungen jeder Nielsen-Heuristik.'\n    },\n    'llama3': {\n        systemRole: 'Als UX-Experte mit Fokus auf praktische und direkte Problembenennung, analysiere aus nutzerorientierter Sicht mit klaren, umsetzbaren Empfehlungen. Konzentriere dich auf die wichtigsten Usability-Aspekte.',\n        focusAreas: [\n            'Grundlegende Usability-Prinzipien',\n            'Klare Problemidentifikation',\n            'Zugänglichkeit',\n            'Nutzerfreundlichkeit',\n            'Praktische Lösungen'\n        ],\n        additionalInstructions: 'Konzentriere dich auf die wichtigsten Usability-Probleme mit klaren, praktischen Lösungsvorschlägen. Vermeide übermäßig technische Terminologie.'\n    }\n};\n/**\r\n * Qualitätskontrolle für LLM-Antworten\r\n * Prüft die Antwort auf typische Probleme\r\n */ class ResponseValidator {\n    static validateResponse(response) {\n        const issues = [];\n        const suggestions = [];\n        // Prüfe auf zu kurze Antworten\n        if (response.length < 200) {\n            issues.push('Antwort zu kurz - möglicherweise unvollständig');\n            suggestions.push('Prompt erweitern oder spezifischere Anweisungen geben');\n        }\n        // Prüfe auf wiederholte Phrasen (mögliche Halluzination)\n        const words = response.split(' ');\n        const repeatedPhrases = this.findRepeatedPhrases(words);\n        if (repeatedPhrases.length > 0) {\n            issues.push('Wiederholte Phrasen entdeckt');\n            suggestions.push('Prompt zur Vermeidung von Wiederholungen anpassen');\n        }\n        // Prüfe auf Struktur\n        if (!response.includes('##') && !response.includes('**')) {\n            issues.push('Fehlende Strukturierung der Antwort');\n            suggestions.push('Klarere Formatierungsanweisungen im Prompt');\n        }\n        return {\n            isValid: issues.length === 0,\n            issues,\n            suggestions\n        };\n    }\n    static findRepeatedPhrases(words) {\n        // Vereinfachte Implementierung - kann erweitert werden\n        const phrases = new Map();\n        for(let i = 0; i < words.length - 2; i++){\n            const phrase = words.slice(i, i + 3).join(' ');\n            phrases.set(phrase, (phrases.get(phrase) || 0) + 1);\n        }\n        return Array.from(phrases.entries()).filter(([_, count])=>count > 1).map(([phrase, _])=>phrase);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/promptEngineering.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream/web");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/formdata-node","vendor-chunks/next","vendor-chunks/openai","vendor-chunks/tr46","vendor-chunks/@anthropic-ai","vendor-chunks/together-ai","vendor-chunks/web-streams-polyfill","vendor-chunks/node-fetch","vendor-chunks/whatwg-url","vendor-chunks/event-target-shim","vendor-chunks/agentkeepalive","vendor-chunks/form-data-encoder","vendor-chunks/webidl-conversions","vendor-chunks/abort-controller","vendor-chunks/ms","vendor-chunks/humanize-ms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CUsers%5CKarim%5CDocuments%5CBachelorprojekt%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CKarim%5CDocuments%5CBachelorprojekt&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();