"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/aggregatedExport.ts":
/*!*************************************!*\
  !*** ./src/lib/aggregatedExport.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CrossSurfaceAnalyzer: () => (/* binding */ CrossSurfaceAnalyzer),\n/* harmony export */   createAggregatedExcelWorkbook: () => (/* binding */ createAggregatedExcelWorkbook),\n/* harmony export */   exportAggregatedExcel: () => (/* binding */ exportAggregatedExcel)\n/* harmony export */ });\n/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! xlsx */ \"(app-pages-browser)/./node_modules/xlsx/xlsx.mjs\");\n/* harmony import */ var _projectManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./projectManager */ \"(app-pages-browser)/./src/lib/projectManager.ts\");\n// 🎯 Aggregated Excel Export - Multi-Surface Analysis Aggregator (MSAA)\n// Exportiert mehrere Analysen eines Projekts in einem umfassenden Excel-File\n\n\n// 🧠 Cross-Surface Analysis Engine\nclass CrossSurfaceAnalyzer {\n    static analyzeProject(projectId) {\n        var _dates_, _dates_1;\n        const project = _projectManager__WEBPACK_IMPORTED_MODULE_0__.ProjectManager.getProject(projectId);\n        const analyses = _projectManager__WEBPACK_IMPORTED_MODULE_0__.ProjectManager.getAnalysesByProject(projectId);\n        if (!project || analyses.length === 0) {\n            throw new Error(\"Projekt \".concat(projectId, \" nicht gefunden oder leer\"));\n        }\n        console.log('\\uD83D\\uDD0D Analysiere Projekt \"'.concat(project.projectName, '\" mit ').concat(analyses.length, \" Analysen...\"));\n        // Cross-Surface Analysis durchführen\n        const crossAnalysis = this.performCrossSurfaceAnalysis(analyses);\n        const projectStats = this.calculateProjectStats(analyses);\n        // Datum-Range ermitteln\n        const dates = analyses.map((a)=>a.createdAt).sort((a, b)=>a.getTime() - b.getTime());\n        const dateRange = {\n            earliest: ((_dates_ = dates[0]) === null || _dates_ === void 0 ? void 0 : _dates_.toLocaleDateString('de-DE')) || 'Unbekannt',\n            latest: ((_dates_1 = dates[dates.length - 1]) === null || _dates_1 === void 0 ? void 0 : _dates_1.toLocaleDateString('de-DE')) || 'Unbekannt'\n        };\n        const exportId = \"AGG_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substring(2, 8)).toUpperCase();\n        return {\n            projectInfo: {\n                projectId: project.projectId,\n                projectName: project.projectName,\n                projectDescription: project.projectDescription,\n                totalAnalyses: analyses.length,\n                dateRange,\n                exportDate: new Date().toLocaleDateString('de-DE'),\n                exportId\n            },\n            analyses,\n            crossSurfaceAnalysis: crossAnalysis,\n            projectStats\n        };\n    }\n    static performCrossSurfaceAnalysis(analyses) {\n        const allBefunde = analyses.flatMap((analysis)=>analysis.analysisData.befunde.map((befund)=>({\n                    ...befund,\n                    surfaceName: analysis.surfaceName,\n                    surfaceType: analysis.surfaceType,\n                    analysisId: analysis.analysisId\n                })));\n        // Häufige Probleme erkennen (basierend auf ähnlichen Titeln/Beschreibungen)\n        const commonProblems = this.detectCommonProblems(allBefunde);\n        // Schweregrad-Verteilung\n        const severityDistribution = allBefunde.reduce((acc, befund)=>{\n            acc[befund.schweregrad] = (acc[befund.schweregrad] || 0) + 1;\n            return acc;\n        }, {});\n        // Oberflächen-Vergleich\n        const surfaceComparison = this.compareSurfaces(analyses);\n        // Trends (vereinfacht - basierend auf Chronologie)\n        const trends = this.analyzeTrends(analyses);\n        return {\n            totalBefunde: allBefunde.length,\n            commonProblems,\n            severityDistribution,\n            surfaceComparison,\n            trends\n        };\n    }\n    static detectCommonProblems(befunde) {\n        // Gruppiere ähnliche Probleme basierend auf Keywords in Titel/Beschreibung\n        const problemGroups = {};\n        const keywords = [\n            'navigation',\n            'button',\n            'text',\n            'color',\n            'contrast',\n            'layout',\n            'mobile',\n            'responsive',\n            'accessibility',\n            'loading',\n            'error',\n            'form',\n            'validation',\n            'usability',\n            'user',\n            'interface',\n            'design',\n            'functionality'\n        ];\n        befunde.forEach((befund)=>{\n            const text = \"\".concat(befund.titel, \" \").concat(befund.beschreibung).toLowerCase();\n            // Finde relevante Keywords\n            const foundKeywords = keywords.filter((keyword)=>text.includes(keyword));\n            if (foundKeywords.length > 0) {\n                const primaryKeyword = foundKeywords[0]; // Nehme das erste gefundene Keyword\n                if (!problemGroups[primaryKeyword]) {\n                    problemGroups[primaryKeyword] = [];\n                }\n                problemGroups[primaryKeyword].push(befund);\n            }\n        });\n        // Konvertiere zu common problems Format\n        return Object.entries(problemGroups).filter((param)=>{\n            let [, group] = param;\n            return group.length > 1;\n        }) // Nur Probleme die mehrfach auftreten\n        .map((param)=>{\n            let [keyword, group] = param;\n            return {\n                problem: \"\".concat(keyword.charAt(0).toUpperCase() + keyword.slice(1), \"-bezogene Probleme\"),\n                occurrences: group.length,\n                surfaces: [\n                    ...new Set(group.map((b)=>b.surfaceName))\n                ],\n                severity: this.getMostCommonSeverity(group)\n            };\n        }).sort((a, b)=>b.occurrences - a.occurrences).slice(0, 10); // Top 10 häufigste Probleme\n    }\n    static getMostCommonSeverity(befunde) {\n        var _Object_entries_sort_;\n        const severityCounts = befunde.reduce((acc, b)=>{\n            acc[b.schweregrad] = (acc[b.schweregrad] || 0) + 1;\n            return acc;\n        }, {});\n        return ((_Object_entries_sort_ = Object.entries(severityCounts).sort((param, param1)=>{\n            let [, a] = param, [, b] = param1;\n            return b - a;\n        })[0]) === null || _Object_entries_sort_ === void 0 ? void 0 : _Object_entries_sort_[0]) || 'unknown';\n    }\n    static compareSurfaces(analyses) {\n        return analyses.map((analysis)=>{\n            const befunde = analysis.analysisData.befunde;\n            const criticalIssues = befunde.filter((b)=>[\n                    'critical',\n                    'catastrophic',\n                    'serious'\n                ].includes(b.schweregrad)).length;\n            // Durchschnittlicher Schweregrad (vereinfacht)\n            const severityScores = {\n                'catastrophic': 5,\n                'critical': 4,\n                'serious': 3,\n                'minor': 2,\n                'positive': 1,\n                'Nicht bewertet': 0\n            };\n            const avgScore = befunde.length > 0 ? befunde.reduce((sum, b)=>sum + (severityScores[b.schweregrad] || 0), 0) / befunde.length : 0;\n            const avgSeverity = avgScore >= 4 ? 'Hoch' : avgScore >= 2.5 ? 'Mittel' : 'Niedrig';\n            return {\n                surfaceName: analysis.surfaceName,\n                surfaceType: analysis.surfaceType,\n                befundeCount: befunde.length,\n                criticalIssues,\n                averageSeverity: avgSeverity\n            };\n        });\n    }\n    static analyzeTrends(analyses) {\n        // Sortiere Analysen chronologisch\n        const sortedAnalyses = [\n            ...analyses\n        ].sort((a, b)=>a.createdAt.getTime() - b.createdAt.getTime());\n        // Vereinfachte Trend-Analyse basierend auf Anzahl kritischer Probleme über Zeit\n        const improvingAreas = [];\n        const worseningAreas = [];\n        if (sortedAnalyses.length >= 2) {\n            const early = sortedAnalyses.slice(0, Math.ceil(sortedAnalyses.length / 2));\n            const recent = sortedAnalyses.slice(Math.floor(sortedAnalyses.length / 2));\n            const earlyCritical = early.reduce((sum, a)=>sum + a.analysisData.befunde.filter((b)=>[\n                        'critical',\n                        'catastrophic'\n                    ].includes(b.schweregrad)).length, 0) / early.length;\n            const recentCritical = recent.reduce((sum, a)=>sum + a.analysisData.befunde.filter((b)=>[\n                        'critical',\n                        'catastrophic'\n                    ].includes(b.schweregrad)).length, 0) / recent.length;\n            if (recentCritical < earlyCritical) {\n                improvingAreas.push('Kritische Probleme reduziert');\n            } else if (recentCritical > earlyCritical) {\n                worseningAreas.push('Kritische Probleme gestiegen');\n            }\n        }\n        return {\n            improvingAreas,\n            worseningAreas\n        };\n    }\n    static calculateProjectStats(analyses) {\n        const promptVariants = [\n            ...new Set(analyses.map((a)=>a.analysisData.promptVariante))\n        ];\n        const llmModels = [\n            ...new Set(analyses.map((a)=>a.analysisData.llmModell))\n        ];\n        const surfaceTypes = analyses.reduce((acc, a)=>{\n            acc[a.surfaceType] = (acc[a.surfaceType] || 0) + 1;\n            return acc;\n        }, {});\n        const surfaceCategories = analyses.reduce((acc, a)=>{\n            acc[a.surfaceCategory] = (acc[a.surfaceCategory] || 0) + 1;\n            return acc;\n        }, {});\n        const totalProcessingTime = analyses.reduce((sum, a)=>sum + a.analysisData.verarbeitungszeit, 0);\n        const totalBefunde = analyses.reduce((sum, a)=>sum + a.analysisData.befunde.length, 0);\n        const analysisEfficiency = totalProcessingTime > 0 ? Math.round(totalBefunde / (totalProcessingTime / 60000) * 100) / 100 // Befunde pro Minute\n         : 0;\n        return {\n            promptVariantsUsed: promptVariants,\n            llmModelsUsed: llmModels,\n            surfaceTypes,\n            surfaceCategories,\n            totalProcessingTime,\n            analysisEfficiency\n        };\n    }\n}\n// 📊 Aggregated Excel Workbook Creator\nfunction createAggregatedExcelWorkbook(data) {\n    console.log('\\uD83D\\uDCCA Erstelle Aggregated Excel f\\xfcr Projekt \"'.concat(data.projectInfo.projectName, '\"...'));\n    const workbook = xlsx__WEBPACK_IMPORTED_MODULE_1__.utils.book_new();\n    // === 1. PROJEKT-ÜBERSICHT ===\n    const overviewData = [\n        [\n            'PROJEKT-ANALYSE ÜBERSICHT'\n        ],\n        [\n            ''\n        ],\n        [\n            'PROJEKT-INFORMATIONEN'\n        ],\n        [\n            'Projektname',\n            data.projectInfo.projectName\n        ],\n        [\n            'Projekt ID',\n            data.projectInfo.projectId\n        ],\n        [\n            'Beschreibung',\n            data.projectInfo.projectDescription || 'Keine Beschreibung'\n        ],\n        [\n            'Export-Datum',\n            data.projectInfo.exportDate\n        ],\n        [\n            'Export-ID',\n            data.projectInfo.exportId\n        ],\n        [\n            ''\n        ],\n        [\n            'ANALYSE-STATISTIKEN'\n        ],\n        [\n            'Gesamtanzahl Analysen',\n            data.projectInfo.totalAnalyses\n        ],\n        [\n            'Gesamtanzahl Befunde',\n            data.crossSurfaceAnalysis.totalBefunde\n        ],\n        [\n            'Zeitraum (von)',\n            data.projectInfo.dateRange.earliest\n        ],\n        [\n            'Zeitraum (bis)',\n            data.projectInfo.dateRange.latest\n        ],\n        [\n            ''\n        ],\n        [\n            'EFFIZIENZ-METRIKEN'\n        ],\n        [\n            'Gesamte Verarbeitungszeit (ms)',\n            data.projectStats.totalProcessingTime\n        ],\n        [\n            'Analyse-Effizienz (Befunde/Min)',\n            data.projectStats.analysisEfficiency\n        ],\n        [\n            'Ø Befunde pro Analyse',\n            Math.round(data.crossSurfaceAnalysis.totalBefunde / data.projectInfo.totalAnalyses * 100) / 100\n        ],\n        [\n            ''\n        ],\n        [\n            'VERWENDETE TECHNOLOGIEN'\n        ],\n        [\n            'Prompt-Varianten',\n            data.projectStats.promptVariantsUsed.join(', ')\n        ],\n        [\n            'LLM-Modelle',\n            data.projectStats.llmModelsUsed.join(', ')\n        ]\n    ];\n    const overviewWS = xlsx__WEBPACK_IMPORTED_MODULE_1__.utils.aoa_to_sheet(overviewData);\n    overviewWS['!cols'] = [\n        {\n            wch: 30\n        },\n        {\n            wch: 60\n        }\n    ];\n    xlsx__WEBPACK_IMPORTED_MODULE_1__.utils.book_append_sheet(workbook, overviewWS, '📊 Projekt-Übersicht');\n    // === 2. PROJEKT-KONTEXT (NEU) ===\n    const contextData = [\n        [\n            'PROJEKT-KONTEXT & EINGABEN'\n        ],\n        [\n            ''\n        ],\n        [\n            'KONTEXT-INFORMATIONEN AUS ALLEN ANALYSEN'\n        ]\n    ];\n    // Sammle alle einzigartigen Kontext-Informationen\n    const allAppOverviews = [\n        ...new Set(data.analyses.map((a)=>a.analysisData.appOverview).filter(Boolean))\n    ];\n    const allUserTasks = [\n        ...new Set(data.analyses.map((a)=>a.analysisData.benutzerAufgabe).filter(Boolean))\n    ];\n    const allCodeInputs = [\n        ...new Set(data.analyses.map((a)=>a.analysisData.eingegebenerCode).filter((code)=>code && code !== 'Kein Code eingegeben'))\n    ];\n    // App-Übersichten hinzufügen\n    if (allAppOverviews.length > 0) {\n        contextData.push([\n            ''\n        ], [\n            'APP-ÜBERSICHTEN'\n        ]);\n        allAppOverviews.forEach((overview, index)=>{\n            contextData.push([\n                \"App-\\xdcbersicht \".concat(index + 1),\n                overview\n            ]);\n        });\n    }\n    // Benutzeraufgaben hinzufügen\n    if (allUserTasks.length > 0) {\n        contextData.push([\n            ''\n        ], [\n            'BENUTZERAUFGABEN'\n        ]);\n        allUserTasks.forEach((task, index)=>{\n            contextData.push([\n                \"Benutzeraufgabe \".concat(index + 1),\n                task\n            ]);\n        });\n    }\n    // Code-Eingaben hinzufügen\n    if (allCodeInputs.length > 0) {\n        contextData.push([\n            ''\n        ], [\n            'QUELLCODE-EINGABEN'\n        ]);\n        allCodeInputs.forEach((code, index)=>{\n            contextData.push([\n                \"Code-Eingabe \".concat(index + 1),\n                code\n            ]);\n        });\n    }\n    // Falls keine Kontextdaten vorhanden\n    if (allAppOverviews.length === 0 && allUserTasks.length === 0 && allCodeInputs.length === 0) {\n        contextData.push([\n            ''\n        ], [\n            'Hinweis',\n            'Keine spezifischen Kontext-Eingaben in den Analysen gefunden.'\n        ]);\n    }\n    const contextWS = xlsx__WEBPACK_IMPORTED_MODULE_1__.utils.aoa_to_sheet(contextData);\n    contextWS['!cols'] = [\n        {\n            wch: 25\n        },\n        {\n            wch: 100\n        }\n    ]; // Label-Spalte und breite Inhalt-Spalte\n    xlsx__WEBPACK_IMPORTED_MODULE_1__.utils.book_append_sheet(workbook, contextWS, '📋 Projekt-Kontext');\n    // === 3. CROSS-SURFACE ANALYSE ===\n    const crossData = [\n        [\n            'CROSS-SURFACE ANALYSE'\n        ],\n        [\n            ''\n        ],\n        [\n            'HÄUFIGE PROBLEME ÜBER ALLE OBERFLÄCHEN'\n        ],\n        [\n            'Problem-Typ',\n            'Häufigkeit',\n            'Betroffene Oberflächen',\n            'Häufigster Schweregrad'\n        ]\n    ];\n    data.crossSurfaceAnalysis.commonProblems.forEach((problem)=>{\n        crossData.push([\n            problem.problem,\n            problem.occurrences.toString(),\n            problem.surfaces.join(', '),\n            problem.severity\n        ]);\n    });\n    crossData.push([\n        ''\n    ], [\n        'SCHWEREGRAD-VERTEILUNG (GESAMT)'\n    ], [\n        'Schweregrad',\n        'Anzahl',\n        'Prozent'\n    ]);\n    const totalBefunde = data.crossSurfaceAnalysis.totalBefunde;\n    Object.entries(data.crossSurfaceAnalysis.severityDistribution).forEach((param)=>{\n        let [severity, count] = param;\n        const percent = totalBefunde > 0 ? (count / totalBefunde * 100).toFixed(1) : '0';\n        crossData.push([\n            severity,\n            count.toString(),\n            \"\".concat(percent, \"%\")\n        ]);\n    });\n    const crossWS = xlsx__WEBPACK_IMPORTED_MODULE_1__.utils.aoa_to_sheet(crossData);\n    crossWS['!cols'] = [\n        {\n            wch: 30\n        },\n        {\n            wch: 15\n        },\n        {\n            wch: 40\n        },\n        {\n            wch: 20\n        }\n    ];\n    xlsx__WEBPACK_IMPORTED_MODULE_1__.utils.book_append_sheet(workbook, crossWS, '🔍 Cross-Surface Analyse');\n    // === 4. OBERFLÄCHEN-VERGLEICH ===\n    const comparisonData = [\n        [\n            'OBERFLÄCHEN-VERGLEICH'\n        ],\n        [\n            ''\n        ],\n        [\n            'Oberfläche',\n            'Typ',\n            'Befunde (Gesamt)',\n            'Kritische Probleme',\n            'Ø Schweregrad'\n        ]\n    ];\n    data.crossSurfaceAnalysis.surfaceComparison.forEach((surface)=>{\n        comparisonData.push([\n            surface.surfaceName,\n            surface.surfaceType,\n            surface.befundeCount.toString(),\n            surface.criticalIssues.toString(),\n            surface.averageSeverity\n        ]);\n    });\n    const comparisonWS = xlsx__WEBPACK_IMPORTED_MODULE_1__.utils.aoa_to_sheet(comparisonData);\n    comparisonWS['!cols'] = [\n        {\n            wch: 30\n        },\n        {\n            wch: 15\n        },\n        {\n            wch: 15\n        },\n        {\n            wch: 18\n        },\n        {\n            wch: 15\n        }\n    ];\n    xlsx__WEBPACK_IMPORTED_MODULE_1__.utils.book_append_sheet(workbook, comparisonWS, '📈 Oberflächen-Vergleich');\n    // === 5. ALLE BEFUNDE KONSOLIDIERT ===\n    const befundeData = [\n        [\n            'ALLE BEFUNDE (KONSOLIDIERT)'\n        ],\n        [\n            ''\n        ],\n        [\n            'Oberfläche',\n            'Typ',\n            'Befund-ID',\n            'Kategorie',\n            'Schweregrad',\n            'Titel',\n            'Beschreibung'\n        ]\n    ];\n    data.analyses.forEach((analysis)=>{\n        analysis.analysisData.befunde.forEach((befund)=>{\n            befundeData.push([\n                analysis.surfaceName,\n                analysis.surfaceType,\n                befund.befundId,\n                befund.kategorie,\n                befund.schweregrad,\n                befund.titel,\n                befund.beschreibung\n            ]);\n        });\n    });\n    const befundeWS = xlsx__WEBPACK_IMPORTED_MODULE_1__.utils.aoa_to_sheet(befundeData);\n    befundeWS['!cols'] = [\n        {\n            wch: 25\n        },\n        {\n            wch: 12\n        },\n        {\n            wch: 25\n        },\n        {\n            wch: 15\n        },\n        {\n            wch: 15\n        },\n        {\n            wch: 30\n        },\n        {\n            wch: 80\n        } // Beschreibung\n    ];\n    xlsx__WEBPACK_IMPORTED_MODULE_1__.utils.book_append_sheet(workbook, befundeWS, '📋 Alle Befunde');\n    // === 5. EINZELNE ANALYSEN (als separate Sheets) ===\n    data.analyses.forEach((analysis, index)=>{\n        const analysisData = [\n            [\n                \"ANALYSE: \".concat(analysis.surfaceName)\n            ],\n            [\n                ''\n            ],\n            [\n                'META-INFORMATIONEN'\n            ],\n            [\n                'Oberfläche',\n                analysis.surfaceName\n            ],\n            [\n                'Typ',\n                analysis.surfaceType\n            ],\n            [\n                'Kategorie',\n                analysis.surfaceCategory\n            ],\n            [\n                'Erstellt am',\n                analysis.createdAt.toLocaleDateString('de-DE')\n            ],\n            [\n                'Tags',\n                analysis.tags.join(', ')\n            ],\n            [\n                ''\n            ],\n            [\n                'ANALYSE-DETAILS'\n            ],\n            [\n                'Titel',\n                analysis.analysisData.titel\n            ],\n            [\n                'Prompt-Variante',\n                analysis.analysisData.promptVariante\n            ],\n            [\n                'LLM-Modell',\n                analysis.analysisData.llmModell\n            ],\n            [\n                'Verarbeitungszeit (ms)',\n                analysis.analysisData.verarbeitungszeit\n            ],\n            [\n                ''\n            ],\n            [\n                'BEFUNDE'\n            ],\n            [\n                'Befund-ID',\n                'Kategorie',\n                'Schweregrad',\n                'Titel',\n                'Beschreibung'\n            ]\n        ];\n        analysis.analysisData.befunde.forEach((befund)=>{\n            analysisData.push([\n                befund.befundId,\n                befund.kategorie,\n                befund.schweregrad,\n                befund.titel,\n                befund.beschreibung\n            ]);\n        });\n        const analysisWS = xlsx__WEBPACK_IMPORTED_MODULE_1__.utils.aoa_to_sheet(analysisData);\n        analysisWS['!cols'] = [\n            {\n                wch: 25\n            },\n            {\n                wch: 15\n            },\n            {\n                wch: 15\n            },\n            {\n                wch: 30\n            },\n            {\n                wch: 80\n            } // Beschreibung\n        ];\n        // Sheet-Name kürzen falls nötig (Excel-Limit: 31 Zeichen)\n        const sheetName = analysis.surfaceName.length > 25 ? \"\".concat(analysis.surfaceName.substring(0, 22), \"...\") : analysis.surfaceName;\n        xlsx__WEBPACK_IMPORTED_MODULE_1__.utils.book_append_sheet(workbook, analysisWS, \"\".concat(index + 1, \". \").concat(sheetName));\n    });\n    console.log(\"✅ Aggregated Excel mit \".concat(workbook.SheetNames.length, \" Arbeitsbl\\xe4ttern erstellt\"));\n    return workbook;\n}\n// 🚀 Main Export Function\nfunction exportAggregatedExcel(projectId) {\n    try {\n        console.log(\"\\uD83D\\uDE80 Starte Aggregated Excel Export f\\xfcr Projekt \".concat(projectId, \"...\"));\n        // Projekt-Daten analysieren\n        const aggregatedData = CrossSurfaceAnalyzer.analyzeProject(projectId);\n        // Excel-Workbook erstellen\n        const workbook = createAggregatedExcelWorkbook(aggregatedData);\n        // Dateiname generieren\n        const safeProjectName = aggregatedData.projectInfo.projectName.replace(/[^a-zA-Z0-9]/g, '_');\n        const filename = \"Projekt_\".concat(safeProjectName, \"_Aggregated_\").concat(aggregatedData.projectInfo.exportId, \".xlsx\");\n        // Download starten\n        const excelBuffer = xlsx__WEBPACK_IMPORTED_MODULE_1__.write(workbook, {\n            bookType: 'xlsx',\n            type: 'array',\n            compression: true\n        });\n        const blob = new Blob([\n            excelBuffer\n        ], {\n            type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n        });\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = filename;\n        link.style.display = 'none';\n        document.body.appendChild(link);\n        link.click();\n        setTimeout(()=>{\n            document.body.removeChild(link);\n            URL.revokeObjectURL(url);\n        }, 100);\n        // Erfolgs-Feedback\n        alert(\"\\uD83C\\uDFAF Aggregated Excel Export erfolgreich!\\n\\n\" + \"Projekt: \".concat(aggregatedData.projectInfo.projectName, \"\\n\") + \"Datei: \".concat(filename, \"\\n\\n\") + \"Inhalt:\\n\" + \"• \".concat(aggregatedData.projectInfo.totalAnalyses, \" Analysen\\n\") + \"• \".concat(aggregatedData.crossSurfaceAnalysis.totalBefunde, \" Befunde\\n\") + \"• \".concat(workbook.SheetNames.length, \" Arbeitsbl\\xe4tter\\n\") + \"• Cross-Surface Analyse\\n\" + \"• Trend-Analyse\\n\\n\" + \"Die Datei wurde heruntergeladen.\");\n        console.log(\"✅ Aggregated Excel Export abgeschlossen: \".concat(filename));\n    } catch (error) {\n        console.error('❌ Aggregated Excel Export Fehler:', error);\n        const errorMessage = error instanceof Error ? error.message : 'Unbekannter Fehler';\n        alert(\"❌ Aggregated Excel Export fehlgeschlagen!\\n\\nFehler: \".concat(errorMessage));\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/aggregatedExport.ts\n"));

/***/ })

});