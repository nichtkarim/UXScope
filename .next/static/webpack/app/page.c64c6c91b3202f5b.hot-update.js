"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/excelExport.ts":
/*!********************************!*\
  !*** ./src/lib/excelExport.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createExcelWorkbook: () => (/* binding */ createExcelWorkbook),\n/* harmony export */   downloadExcelFile: () => (/* binding */ downloadExcelFile),\n/* harmony export */   exportToExcel: () => (/* binding */ exportToExcel),\n/* harmony export */   prepareExcelData: () => (/* binding */ prepareExcelData)\n/* harmony export */ });\n/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xlsx */ \"(app-pages-browser)/./node_modules/xlsx/xlsx.mjs\");\n\nfunction prepareExcelData(analysis, metadata, promptUsed, contextData, promptVariant, promptLanguage, summary, parsedSections) {\n    const now = new Date();\n    const exportId = \"UXS_\".concat(now.getFullYear(), \"_\").concat((now.getMonth() + 1).toString().padStart(2, '0'), \"_\").concat(now.getDate().toString().padStart(2, '0'), \"_\").concat(now.getHours().toString().padStart(2, '0')).concat(now.getMinutes().toString().padStart(2, '0')).concat(now.getSeconds().toString().padStart(2, '0'));\n    // Befunde strukturieren - unterschiedliche Behandlung für Study-Pure\n    const befunde = parsedSections.filter((section)=>section.type !== 'summary').map((section, index)=>({\n            befundId: \"\".concat(exportId, \"_B\").concat((index + 1).toString().padStart(3, '0')),\n            kategorie: promptVariant === 'study-pure' ? 'Befund' : section.type,\n            schweregrad: promptVariant === 'study-pure' ? 'Nicht bewertet' : section.severity,\n            titel: promptVariant === 'study-pure' ? \"Befund \".concat(index + 1) : section.title,\n            beschreibung: section.content[0] || '',\n            position: section.textPosition || -1\n        }));\n    return {\n        titel: \"Usability-Analyse \".concat(promptVariant.toUpperCase()),\n        datum: now.toLocaleDateString('de-DE'),\n        zeit: now.toLocaleTimeString('de-DE'),\n        exportId: exportId,\n        promptVariante: promptVariant === 'study-pure' ? 'Study-Pure (A)' : promptVariant === 'basic' ? 'Basic (B)' : 'Advanced (C)',\n        promptSprache: promptLanguage === 'de' ? 'Deutsch' : 'English',\n        llmModell: \"\".concat((metadata === null || metadata === void 0 ? void 0 : metadata.llmName) || 'Unbekannt', \" (\").concat((metadata === null || metadata === void 0 ? void 0 : metadata.llmModel) || 'Unbekannt', \")\"),\n        appOverview: (contextData === null || contextData === void 0 ? void 0 : contextData.description) || 'Keine Beschreibung verfügbar',\n        eingegebenerCode: (contextData === null || contextData === void 0 ? void 0 : contextData.code) || 'Kein Code eingegeben',\n        benutzerAufgabe: (contextData === null || contextData === void 0 ? void 0 : contextData.userTask) || 'Keine Aufgabe definiert',\n        befunde: befunde,\n        vollstaendigeAnalyse: analysis,\n        verarbeitungszeit: (metadata === null || metadata === void 0 ? void 0 : metadata.processingTimeMs) || 0,\n        bildVorhanden: (metadata === null || metadata === void 0 ? void 0 : metadata.imageProvided) || false,\n        kontextVorhanden: (metadata === null || metadata === void 0 ? void 0 : metadata.contextProvided) || false,\n        visionUnterstuetzt: (metadata === null || metadata === void 0 ? void 0 : metadata.supportsVision) || false\n    };\n}\nfunction createExcelWorkbook(data) {\n    const workbook = xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.book_new();\n    // === ÜBERSICHT ARBEITSBLATT ===\n    const uebersichtData = [\n        [\n            'USABILITY-ANALYSE EXPORT'\n        ],\n        [\n            ''\n        ],\n        [\n            'GRUNDINFORMATIONEN'\n        ],\n        [\n            'Titel',\n            data.titel\n        ],\n        [\n            'Export ID',\n            data.exportId\n        ],\n        [\n            'Datum',\n            data.datum\n        ],\n        [\n            'Zeit',\n            data.zeit\n        ],\n        [\n            'Prompt-Variante',\n            data.promptVariante\n        ],\n        [\n            'Prompt-Sprache',\n            data.promptSprache\n        ],\n        [\n            'LLM-Modell',\n            data.llmModell\n        ],\n        [\n            ''\n        ],\n        [\n            'ZUSAMMENFASSUNG'\n        ],\n        [\n            'Gesamte Befunde',\n            data.befunde.length\n        ]\n    ];\n    // Nur für nicht-Study-Pure Varianten: Kategorien-Statistiken hinzufügen\n    const isStudyPure = data.promptVariante.includes('Study-Pure');\n    if (!isStudyPure) {\n        uebersichtData.push([\n            'Katastrophale Probleme',\n            data.befunde.filter((b)=>b.schweregrad === 'catastrophic').length\n        ], [\n            'Kritische Probleme',\n            data.befunde.filter((b)=>b.schweregrad === 'critical').length\n        ], [\n            'Ernste Probleme',\n            data.befunde.filter((b)=>b.schweregrad === 'serious').length\n        ], [\n            'Geringe Probleme',\n            data.befunde.filter((b)=>b.schweregrad === 'minor').length\n        ], [\n            'Positive Befunde',\n            data.befunde.filter((b)=>b.schweregrad === 'positive').length\n        ]);\n    } else {\n        uebersichtData.push([\n            'Hinweis',\n            'Study-Pure Variante: Befunde werden nicht nach Schweregrad kategorisiert'\n        ]);\n    }\n    uebersichtData.push([\n        ''\n    ], [\n        'TECHNISCHE DETAILS'\n    ], [\n        'Verarbeitungszeit (ms)',\n        data.verarbeitungszeit\n    ], [\n        'Bild vorhanden',\n        data.bildVorhanden ? 'Ja' : 'Nein'\n    ], [\n        'Kontext vorhanden',\n        data.kontextVorhanden ? 'Ja' : 'Nein'\n    ], [\n        'Vision unterstützt',\n        data.visionUnterstuetzt ? 'Ja' : 'Nein'\n    ]);\n    const uebersichtWS = xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.aoa_to_sheet(uebersichtData);\n    // Styling für Übersicht\n    uebersichtWS['!cols'] = [\n        {\n            wch: 25\n        },\n        {\n            wch: 50\n        } // Spalte B - Werte\n    ];\n    xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.book_append_sheet(workbook, uebersichtWS, 'Übersicht');\n    // === BEFUNDE ARBEITSBLATT ===\n    const befundeHeaders = [\n        'Befund ID',\n        'Position',\n        'Kategorie',\n        'Schweregrad',\n        'Titel',\n        'Beschreibung'\n    ];\n    const befundeData = [\n        befundeHeaders,\n        ...data.befunde.map((befund)=>[\n                befund.befundId,\n                befund.position >= 0 ? befund.position : 'N/A',\n                befund.kategorie,\n                befund.schweregrad,\n                befund.titel,\n                befund.beschreibung\n            ])\n    ];\n    const befundeWS = xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.aoa_to_sheet(befundeData);\n    // Spaltenbreiten für Befunde\n    befundeWS['!cols'] = [\n        {\n            wch: 20\n        },\n        {\n            wch: 10\n        },\n        {\n            wch: 15\n        },\n        {\n            wch: 15\n        },\n        {\n            wch: 30\n        },\n        {\n            wch: 80\n        } // Beschreibung\n    ];\n    xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.book_append_sheet(workbook, befundeWS, 'Befunde');\n    // === KONTEXT ARBEITSBLATT ===\n    const kontextData = [\n        [\n            'PROJEKT-KONTEXT'\n        ],\n        [\n            ''\n        ],\n        [\n            'App Overview'\n        ],\n        [\n            data.appOverview\n        ],\n        [\n            ''\n        ],\n        [\n            'Eingegebener Code'\n        ],\n        [\n            data.eingegebenerCode\n        ],\n        [\n            ''\n        ],\n        [\n            'Benutzer-Aufgabe'\n        ],\n        [\n            data.benutzerAufgabe\n        ]\n    ];\n    const kontextWS = xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.aoa_to_sheet(kontextData);\n    kontextWS['!cols'] = [\n        {\n            wch: 100\n        }\n    ]; // Eine breite Spalte\n    xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.book_append_sheet(workbook, kontextWS, 'Kontext');\n    // === VOLLSTÄNDIGE ANALYSE ARBEITSBLATT ===\n    const analyseData = [\n        [\n            'VOLLSTÄNDIGE ANALYSE'\n        ],\n        [\n            ''\n        ],\n        [\n            data.vollstaendigeAnalyse\n        ]\n    ];\n    const analyseWS = xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.aoa_to_sheet(analyseData);\n    analyseWS['!cols'] = [\n        {\n            wch: 120\n        }\n    ]; // Sehr breite Spalte für den gesamten Text\n    xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.book_append_sheet(workbook, analyseWS, 'Vollständige Analyse');\n    // === KATEGORIEN ANALYSE ARBEITSBLATT ===\n    const kategorienStats = data.befunde.reduce((acc, befund)=>{\n        if (!acc[befund.schweregrad]) {\n            acc[befund.schweregrad] = [];\n        }\n        acc[befund.schweregrad].push(befund);\n        return acc;\n    }, {});\n    let kategorienData;\n    // Unterschiedliche Darstellung für Study-Pure vs. andere Varianten\n    if (isStudyPure) {\n        kategorienData = [\n            [\n                'BEFUNDE-ÜBERSICHT (STUDY-PURE)'\n            ],\n            [\n                ''\n            ],\n            [\n                'Hinweis',\n                'In der Study-Pure Variante werden Befunde nicht nach Schweregrad kategorisiert.'\n            ],\n            [\n                '',\n                'Alle Befunde werden als neutrale Usability-Befunde behandelt.'\n            ],\n            [\n                ''\n            ],\n            [\n                'Befund Nr.',\n                'Befund ID',\n                'Beschreibung (Auszug)'\n            ]\n        ];\n        data.befunde.forEach((befund, index)=>{\n            const beschreibungAuszug = befund.beschreibung.length > 50 ? befund.beschreibung.substring(0, 50) + '...' : befund.beschreibung;\n            kategorienData.push([\n                (index + 1).toString(),\n                befund.befundId,\n                beschreibungAuszug\n            ]);\n        });\n    } else {\n        kategorienData = [\n            [\n                'KATEGORIEN-ANALYSE'\n            ],\n            [\n                ''\n            ],\n            [\n                'Schweregrad',\n                'Anzahl',\n                'Prozent',\n                'Befund IDs'\n            ]\n        ];\n        const totalBefunde = data.befunde.length;\n        Object.entries(kategorienStats).forEach((param)=>{\n            let [kategorie, befunde] = param;\n            const prozent = totalBefunde > 0 ? (befunde.length / totalBefunde * 100).toFixed(1) : '0';\n            const befundIds = befunde.map((b)=>b.befundId).join(', ');\n            kategorienData.push([\n                kategorie,\n                befunde.length.toString(),\n                \"\".concat(prozent, \"%\"),\n                befundIds\n            ]);\n        });\n    }\n    const kategorienWS = xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.aoa_to_sheet(kategorienData);\n    if (isStudyPure) {\n        kategorienWS['!cols'] = [\n            {\n                wch: 12\n            },\n            {\n                wch: 25\n            },\n            {\n                wch: 80\n            } // Beschreibung\n        ];\n    } else {\n        kategorienWS['!cols'] = [\n            {\n                wch: 20\n            },\n            {\n                wch: 10\n            },\n            {\n                wch: 10\n            },\n            {\n                wch: 60\n            } // Befund IDs\n        ];\n    }\n    const sheetName = isStudyPure ? 'Befunde-Übersicht' : 'Kategorien-Analyse';\n    xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.book_append_sheet(workbook, kategorienWS, sheetName);\n    return workbook;\n}\nfunction downloadExcelFile(workbook, filename) {\n    try {\n        // Excel-Datei als Blob erstellen\n        const excelBuffer = xlsx__WEBPACK_IMPORTED_MODULE_0__.write(workbook, {\n            bookType: 'xlsx',\n            type: 'array',\n            compression: true\n        });\n        const blob = new Blob([\n            excelBuffer\n        ], {\n            type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n        });\n        // Download-Link erstellen\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = filename;\n        link.style.display = 'none';\n        // Download starten\n        document.body.appendChild(link);\n        link.click();\n        // Cleanup\n        setTimeout(()=>{\n            document.body.removeChild(link);\n            URL.revokeObjectURL(url);\n        }, 100);\n        console.log('Excel-Datei \"'.concat(filename, '\" erfolgreich heruntergeladen'));\n    } catch (error) {\n        console.error('Fehler beim Excel-Download:', error);\n        throw new Error(\"Excel-Download fehlgeschlagen: \".concat(error instanceof Error ? error.message : 'Unbekannter Fehler'));\n    }\n}\nfunction exportToExcel(analysis, metadata, promptUsed, contextData, promptVariant, promptLanguage, summary, parsedSections) {\n    try {\n        console.log('Starte Excel-Export...');\n        // Daten vorbereiten\n        const excelData = prepareExcelData(analysis, metadata, promptUsed, contextData, promptVariant, promptLanguage, summary, parsedSections);\n        // Excel-Arbeitsmappe erstellen\n        const workbook = createExcelWorkbook(excelData);\n        // Dateiname generieren\n        const filename = \"Usability_Analyse_\".concat(excelData.exportId, \".xlsx\");\n        // Download starten\n        downloadExcelFile(workbook, filename);\n        // Erfolgs-Feedback\n        alert(\"\\uD83D\\uDCCA Excel-Export erfolgreich!\\n\\nDatei: \".concat(filename, \"\\n\\nInhalt:\\n• \").concat(excelData.befunde.length, \" Befunde\\n• \").concat(Object.keys(excelData).length, \" Datenfelder\\n• 5 Arbeitsbl\\xe4tter\\n\\nDie Datei wurde heruntergeladen.\"));\n    } catch (error) {\n        console.error('Excel-Export Fehler:', error);\n        const errorMessage = error instanceof Error ? error.message : 'Unbekannter Fehler';\n        alert(\"❌ Excel-Export fehlgeschlagen!\\n\\nFehler: \".concat(errorMessage));\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/excelExport.ts\n"));

/***/ })

});