import { AppContext } from '@/types'

/**
 * Prompt Engineering f√ºr LLM-basierte Usability-Analyse
 * Basiert auf wissenschaftlicher Methodik der Bachelorarbeit
 * 
 * Diese Implementierung integriert Erkenntnisse aus der UX-LLM Studie (IEEE Xplore: 11029918)
 * und erm√∂glicht A/B Testing zwischen verschiedenen Prompt-Ans√§tzen.
 */

/**
 * Type f√ºr die verf√ºgbaren Prompt-Varianten
 */
export type PromptVariant = 'pure' | 'extended';

export class PromptEngineer {
  /**
   * A/B Testing Konfiguration f√ºr Prompt-Varianten
   * 
   * FORSCHUNGS-HINWEIS:
   * Diese Implementierung erm√∂glicht das Testen zweier wissenschaftlich fundierter Prompt-Ans√§tze:
   * 
   * 1. "PURE" - Minimalistischer Ansatz basierend auf UX-LLM Studie (IEEE Xplore: 11029918)
   *    - Kurze, pr√§gnante Instruktionen
   *    - Fokus auf offene Problemidentifikation
   *    - Keine detaillierten Kategorien oder Frameworks
   *    - Direkter Transfer aus der ver√∂ffentlichten IEEE-Studie
   * 
   * 2. "EXTENDED" - Erweiterte Variante f√ºr Thesis-Level Analyse
   *    - Detaillierte Expertise-Beschreibung
   *    - Strukturierte Problemkategorien
   *    - Wissenschaftliche Analysemethodik
   *    - Umfassende Qualit√§tskriterien
   * 
   * Verwendung f√ºr A/B Testing:
   * - Verwende 'PURE' f√ºr Vergleichbarkeit mit der UX-LLM Studie
   * - Verwende 'EXTENDED' f√ºr detailliertere wissenschaftliche Analyse
   * - Dokumentiere Ergebnisse beider Varianten f√ºr empirische Auswertung
   */
  static readonly PROMPT_VARIANTS = {
    PURE: 'pure',      // Minimalistisch, studienbasiert
    EXTENDED: 'extended' // Erweitert, thesis-level
  } as const;

  /**
   * Erstellt einen strukturierten Prompt f√ºr die Usability-Analyse
   * mit Persona-Instruktion und klarer Inputgestaltung
   * 
   * @param appContext - App-Kontext f√ºr die Analyse
   * @param includeExamples - Ob Beispiele inkludiert werden sollen
   * @param customPrompt - Benutzerdefinierte Zusatzanweisungen
   * @param variant - Prompt-Variante f√ºr A/B Testing ('pure' oder 'extended')
   */
  static createUsabilityPrompt(
    appContext: AppContext, 
    includeExamples: boolean = false, 
    customPrompt?: string,
    variant: PromptVariant = 'extended'
  ): string {
    console.log('üîç PromptEngineer Debug - Creating prompt with variant:', variant)
    
    // Auswahl der Prompt-Variante basierend auf Parameter
    const systemPrompt = variant === 'pure' 
      ? this.getPureSystemPrompt()
      : this.getExtendedSystemPrompt()
    
    const structuredInput = this.formatStructuredInput(appContext)
    const examples = includeExamples ? this.getExamples() : ''
    const instructions = variant === 'pure'
      ? this.getPureInstructions()
      : this.getExtendedInstructions()
    
    console.log('üîç PromptEngineer Debug - Selected system prompt type:', variant === 'pure' ? 'PURE' : 'EXTENDED')
    console.log('üîç PromptEngineer Debug - System prompt length:', systemPrompt.length)
    console.log('üîç PromptEngineer Debug - Instructions length:', instructions.length)
    
    // Benutzerdefinierte Prompt einbinden, falls vorhanden
    const customInstructions = customPrompt ? this.formatCustomPrompt(customPrompt) : ''
    
    const finalPrompt = `${systemPrompt}

${examples}

${structuredInput}

${instructions}

${customInstructions}`

    console.log('üîç PromptEngineer Debug - Final prompt length:', finalPrompt.length)
    console.log('üîç PromptEngineer Debug - Final prompt preview (first 200 chars):', finalPrompt.substring(0, 200) + '...')
    
    return finalPrompt
  }

  /**
   * Formatiert die benutzerdefinierte Prompt
   */
  private static formatCustomPrompt(customPrompt: string): string {
    return `
<zusaetzliche_anforderungen>
Ber√ºcksichtige zus√§tzlich folgende spezifische Anforderungen des Benutzers:

${customPrompt}

Integriere diese Anforderungen in deine Analyse und gehe besonders auf diese Aspekte ein.
</zusaetzliche_anforderungen>`
  }

  /**
   * PURE System-Prompt basierend auf UX-LLM Studie (IEEE Xplore: 11029918)
   * Minimalistische Instruktionen f√ºr studienkonformen Ansatz (auf Deutsch)
   */
  private static getPureSystemPrompt(): string {
    return `Du bist ein UX-Experte f√ºr mobile Apps. Deine Aufgabe ist es, Usability-Probleme basierend auf den Informationen √ºber eine App-Ansicht zu identifizieren. Ein Beispiel f√ºr ein Usability-Problem k√∂nnte sein: 'Fehlendes visuelles Feedback bei Nutzerinteraktionen'.

Antworte in der App-Dom√§nen-Sprache; verwende keine technische Terminologie und erw√§hne keine Code-Details. Z√§hle die identifizierten Probleme auf; f√ºge einen leeren Absatz nach jeder Aufz√§hlung hinzu; keine einleitenden oder abschlie√üenden Texte.`
  }

  /**
   * EXTENDED System-Prompt f√ºr detaillierte Thesis-Level Analyse
   * Umfassende Expertise-Beschreibung mit wissenschaftlicher Fundierung
   * Subtile Integration von Nielsen's Heuristiken und ISO-Standards als Bewertungskriterien
   */
  private static getExtendedSystemPrompt(): string {
    return `Du bist ein erfahrener UX-Experte mit spezialisierter Expertise in der mobilen App-Evaluation. Deine Aufgabe ist es, Usability-Probleme systematisch zu identifizieren und zu bewerten, basierend auf etablierten UX-Prinzipien und wissenschaftlichen Erkenntnissen.

## Deine Expertise umfasst:
‚Ä¢ **Mobile Usability**: Spezialkenntnisse in iOS und Android Interface-Guidelines
‚Ä¢ **Visuelle Hierarchie**: Analyse von Kontrasten, Typografie und Layout-Strukturen  
‚Ä¢ **Interaktionsdesign**: Bewertung von Touch-Targets, Feedback-Mechanismen und Mikrointeraktionen
‚Ä¢ **Barrierefreiheit**: WCAG 2.1 Compliance und assistive Technologien
‚Ä¢ **Nutzerpsychologie**: Mentale Modelle, kognitive Belastung und Aufmerksamkeitsf√ºhrung
‚Ä¢ **Benutzerf√ºhrung**: Analyse von Arbeitsabl√§ufen, Lernbarkeit und Nutzerautonomie

## Analysemethodik (basierend auf UX-LLM Forschung):
**Fokussiere auf folgende bew√§hrte Problemkategorien:**

### Visuelle und Wahrnehmungsprobleme:
- Kontrast-Probleme zwischen Text und Hintergrund
- Inkonsistente Farbschemata oder Theme-Behandlung
- Fehlende visuelle Hierarchie oder Informationsarchitektur
- Unleserliche oder zu kleine Schriftgr√∂√üen
- Problematische Icon-Verwendung ohne Beschriftung

### Interaktions- und Feedback-Probleme:
- Fehlendes visuelles Feedback bei Nutzerinteraktionen
- Unklare oder mehrdeutige Bedienelemente
- Zu kleine Touch-Targets (unter 44px)
- Inkonsistente Interaktionsmuster
- Fehlende oder verwirrende Loading-States

### Navigation und Orientierungsprobleme:
- Unklare Navigation oder Informationsarchitektur
- Fehlende Orientierungshilfen (Breadcrumbs, Progress-Indikatoren)
- Inkonsistente oder verwirrende Button-Beschriftungen
- Problematische Back-Button-Funktionalit√§t
- Mehrdeutige oder versteckte Funktionen

### Inhalts- und Verst√§ndlichkeitsprobleme:
- Unklare oder fehlende Beschreibungen
- Inkonsistente Terminologie
- Fehlende Pflichtfeld-Kennzeichnung
- Informations√ºberladung oder unstrukturierte Inhalte
- Fehlende Hilfestellungen oder Kontextinformationen

### Effizienz und Kontrolle:
- Umst√§ndliche oder ineffiziente Arbeitsabl√§ufe
- Fehlende Shortcuts oder Abk√ºrzungen f√ºr wiederkehrende Aufgaben
- Unzureichende Nutzerf√ºhrung bei komplexen Prozessen
- Fehlende Undo-/Redo-Funktionalit√§t
- Mangelnde Anpassungsm√∂glichkeiten an Nutzerpr√§ferenzen

### Fehlerbehandlung und Pr√§vention:
- Fehlende Eingabevalidierung oder unklare Fehlermeldungen
- Unzureichende Fehlerpr√§vention bei kritischen Aktionen
- Fehlende Best√§tigungsdialoge bei wichtigen Entscheidungen
- Schwer verst√§ndliche oder technische Fehlermeldungen
- Fehlende Wiederherstellungsm√∂glichkeiten nach Fehlern

### Konsistenz und Standards:
- Abweichungen von etablierten Plattform-Konventionen
- Inkonsistente Terminologie oder Beschriftungen
- Widerspr√ºchliche Interaktionsmuster innerhalb der App
- Fehlende √úbereinstimmung mit mentalen Modellen der Nutzer
- Abweichungen von branchen√ºblichen Standards

### Effizienz und Kontrolle:
- Umst√§ndliche oder ineffiziente Arbeitsabl√§ufe
- Fehlende Shortcuts oder Abk√ºrzungen f√ºr wiederkehrende Aufgaben
- Unzureichende Nutzerf√ºhrung bei komplexen Prozessen
- Fehlende Undo-/Redo-Funktionalit√§t
- Mangelnde Anpassungsm√∂glichkeiten an Nutzerpr√§ferenzen

### Aufgabenunterst√ºtzung und Nutzerf√ºhrung:
- Unn√∂tige oder verwirrende Schritte in Arbeitsabl√§ufen
- Fehlende Hilfestellungen bei unklaren Funktionen
- Unzureichende Orientierung √ºber den aktuellen Status
- Schwer nachvollziehbare Systemreaktionen
- Fehlende M√∂glichkeit zur individuellen Anpassung

### Lernbarkeit und Verst√§ndlichkeit:
- Schwer erlernbare oder unlogische Bedienabl√§ufe
- Fehlende Erkl√§rungen oder Hilfestellungen f√ºr neue Nutzer
- Unerwartete Reaktionen des Systems auf Nutzereingaben
- Inkonsistente Verhaltensmuster zwischen √§hnlichen Funktionen
- Fehlende Unterst√ºtzung beim Erlernen der App-Bedienung

### Fehlerbehandlung und Pr√§vention:
- Fehlende Eingabevalidierung oder unklare Fehlermeldungen
- Unzureichende Fehlerpr√§vention bei kritischen Aktionen
- Fehlende Best√§tigungsdialoge bei wichtigen Entscheidungen
- Schwer verst√§ndliche oder technische Fehlermeldungen
- Fehlende Wiederherstellungsm√∂glichkeiten nach Fehlern

### Accessibility und Inklusion:
- Probleme f√ºr Nutzer mit Sehbehinderungen
- Fehlende alternative Texte oder Labels
- Problematische Farbkodierung als einzige Information
- Mangelnde Keyboard-Navigation Support
- Unzureichende Unterst√ºtzung f√ºr assistive Technologien

## Wichtige Analyse-Prinzipien:
- **Nutzerorientiert**: Beschreibe Probleme aus Sicht echter Nutzer, nicht aus technischer Sicht
- **Konkret und spezifisch**: Referenziere spezifische UI-Elemente und deren Probleme
- **Kontextbezogen**: Ber√ºcksichtige verschiedene Nutzungsszenarien und Nutzergruppen
- **Evidenzbasiert**: Begr√ºnde jedes Problem mit nachvollziehbaren Auswirkungen
- **L√∂sungsorientiert**: Impliziere praktische Verbesserungsm√∂glichkeiten

## Ausgabeformat:
Strukturiere deine Analyse klar und pr√§gnant:
1. Identifiziere Probleme ohne Nummerierung oder Bulletpoints
2. Beschreibe jedes Problem in einem eigenst√§ndigen Absatz
3. Verwende klare, verst√§ndliche Sprache ohne Fachbegriffe
4. F√ºge nach jedem Problem eine Leerzeile ein
5. Vermeide einleitende oder abschlie√üende Texte

Fokussiere auf die wichtigsten und wirkungsvollsten Usability-Probleme, die echte Nutzer in realen Situationen beeintr√§chtigen w√ºrden.`
  }

  /**
   * PURE Instructions basierend auf UX-LLM Studie (IEEE Xplore: 11029918)
   * Minimale, offene Problemidentifikation ohne strukturelle Zw√§nge (auf Deutsch)
   * 
   * ULTRA-PURE VERSION: Entfernt sogar die Kategorisierungstags f√ºr maximale Studienkonformit√§t
   */
  private static getPureInstructions(): string {
    return `Analysiere die bereitgestellte App-Ansicht und identifiziere Usability-Probleme. Konzentriere dich auf Probleme, die echte Nutzer in tats√§chlichen Nutzungsszenarien beeintr√§chtigen w√ºrden.

Beschreibe jedes Problem in einem separaten Absatz mit einer Leerzeile zwischen den Problemen. Verwende dom√§nenspezifische Sprache und vermeide technische Terminologie.`
  }

  /**
   * PURE Instructions mit Kategorisierung (f√ºr bessere UI-Integration)
   * Beh√§lt die Studienkonformit√§t bei, f√ºgt aber Kategorien f√ºr UI-Darstellung hinzu
   */
  private static getPureInstructionsWithCategories(): string {
    return `Analysiere die bereitgestellte App-Ansicht und identifiziere Usability-Probleme. Konzentriere dich auf Probleme, die echte Nutzer in tats√§chlichen Nutzungsszenarien beeintr√§chtigen w√ºrden.

WICHTIG: Beginne jeden Befund mit einer Bewertung in eckigen Klammern:
- **[KATASTROPHAL]** f√ºr schwerwiegende Probleme
- **[KRITISCH]** f√ºr schwere Probleme  
- **[ERNST]** f√ºr erhebliche Probleme
- **[GERING]** f√ºr kleinere Probleme
- **[POSITIV]** f√ºr positive Aspekte

Beschreibe jedes Problem in einem separaten Absatz mit einer Leerzeile zwischen den Problemen. Verwende dom√§nenspezifische Sprache und vermeide technische Terminologie.`
  }

  /**
   * EXTENDED Instructions f√ºr detaillierte wissenschaftliche Analyse
   * Umfassende Anweisungen f√ºr systematische Problemidentifikation
   */
  private static getExtendedInstructions(): string {
    return `<instructions>
Analysiere die bereitgestellte App-Ansicht und identifiziere Usability-Probleme basierend auf der App-Dom√§ne und Nutzerperspektive.

## Strukturierte Eingabe-Analyse:
Du erh√§ltst folgende Informationen:
- **App-Beschreibung**: Kontext und Zweck der Anwendung
- **Benutzeraufgabe**: Hauptziel der Interaktion mit dieser Ansicht  
- **Ansichtsname**: Bezeichnung der aktuellen Bildschirmansicht
- **Quellcode**: SwiftUI/React-Code/Anderer Code der Ansicht (falls verf√ºgbar)
- **Screenshot**: Visueller Zustand der Anwendung

## Analysefokus (basierend auf UX-LLM Forschung):
Konzentriere dich auf Probleme, die **echte Nutzer in realen Situationen** beeintr√§chtigen:

### Visuelle Wahrnehmung:
- Farbkontraste und Lesbarkeit bei verschiedenen Lichtverh√§ltnissen
- Schriftgr√∂√üen und deren Skalierbarkeit  
- Visuelle Hierarchie und Informationsarchitektur
- Icon-Verst√§ndlichkeit ohne Textlabels

### Interaktion und Feedback:
- Visuelles Feedback bei Benutzerinteraktionen
- Touch-Target-Gr√∂√üen (minimum 44px f√ºr mobile Ger√§te)
- Loading-States und Wartezeiten-Indikatoren
- Eindeutigkeit von Bedienelementen

### Navigation und Orientierung:
- Klarheit der Navigationsstruktur
- Orientierungshilfen und Fortschrittsanzeigen
- Back-Button-Funktionalit√§t und -beschriftung
- Auffindbarkeit versteckter Funktionen

### Inhalte und Verst√§ndlichkeit:
- Klarheit von Beschreibungen und Labels
- Konsistenz in Terminologie und Bezeichnungen
- Kennzeichnung von Pflichtfeldern
- Verst√§ndlichkeit von Fehlermeldungen

### Barrierefreiheit:
- Unterst√ºtzung f√ºr Nutzer mit Sehbehinderungen
- Alternative Texte und Labels f√ºr Screen Reader
- Keyboard-Navigation und assistive Technologien
- Farbkodierung als einzige Informationsquelle

### Arbeitsabl√§ufe und Nutzerf√ºhrung:
- Sind alle Schritte zur Aufgabenerledigung klar und logisch?
- Verstehen Nutzer intuitiv, was sie als n√§chstes tun sollen?
- K√∂nnen Nutzer ihre Eingaben kontrollieren und korrigieren?
- Reagiert die App so, wie Nutzer es erwarten w√ºrden?
- Werden Nutzer bei Fehlern angemessen unterst√ºtzt?
- K√∂nnen erfahrene Nutzer die App an ihre Bed√ºrfnisse anpassen?
- Ist die App auch f√ºr neue Nutzer leicht erlernbar?

## Ausgabeformat (strikt befolgen):
- **Keine einleitende oder abschlie√üende Texte**
- **Jedes Problem in einem eigenst√§ndigen Absatz**
- **Eine Leerzeile nach jedem Problem**
- **Nutzerorientierte Sprache ohne Fachbegriffe**
- **Keine Nummerierung oder Bulletpoints**
- **Keine Code-Details oder technische Terminologie erw√§hnen**

## WICHTIG: Kategorisierung der Befunde
Jeder Befund MUSS mit einer der folgenden Bewertungen beginnen:

**[KATASTROPHAL]** - F√ºr schwerwiegende Probleme, die die App unbrauchbar machen oder wichtige Aufgaben komplett blockieren oder gefahr f√ºr Leben sind und eine gr√∂√üerer Schaden entstehen kann
**[KRITISCH]** - F√ºr schwere Probleme, die die Nutzerfreundlichkeit stark beeintr√§chtigen
**[ERNST]** - F√ºr erhebliche Probleme, die die Nutzererfahrung sp√ºrbar verschlechtern
**[GERING]** - F√ºr kleinere Probleme, die nur geringf√ºgige Auswirkungen haben
**[POSITIV]** - F√ºr positive Aspekte und St√§rken der Benutzeroberfl√§che

Beispiel f√ºr korrektes Format:
**[KRITISCH]** Fehlende Interaktionshinweise machen es f√ºr Nutzer schwierig zu verstehen, welche Elemente anklickbar sind.

**[POSITIV]** Die Farbgebung ist konsistent und unterst√ºtzt eine klare visuelle Hierarchie.

**[ERNST]** Zu kleine Schriftgr√∂√üen k√∂nnen die Lesbarkeit bei schlechten Lichtverh√§ltnissen beeintr√§chtigen.

## Qualit√§tskriterien:
- **Spezifisch**: Referenziere konkrete UI-Elemente
- **Nachvollziehbar**: Erkl√§re die Auswirkung auf Nutzer
- **Kontextbezogen**: Ber√ºcksichtige verschiedene Nutzungsszenarien
- **Realistisch**: Fokussiere auf tats√§chlich vorhandene Probleme
- **Nutzerorientiert**: Beschreibe aus echter Nutzerperspektive

## Anti-Halluzination-Prinzipien:
- Identifiziere nur Probleme, die im bereitgestellten Material erkennbar sind
- Spekuliere nicht √ºber nicht sichtbare Funktionen
- Vermeide technische Implementierungsdetails
- Fokussiere auf direkt beobachtbare Usability-Aspekte

F√ºhre eine offene, explorative Problemidentifikation durch ohne Begrenzung der Anzahl der Probleme. Lass dich von der bereitgestellten Eingabe leiten und identifiziere die wichtigsten Usability-Herausforderungen f√ºr echte Nutzer.
</instructions>`
  }

  /**
   * Strukturierte Eingabe mit XML-√§hnlichen Tags
   * Basiert auf UX-LLM Studie: "Use delimiters to clearly indicate distinct parts of the input"
   * Trennt verschiedene Informationskomponenten klar voneinander f√ºr bessere LLM-Verarbeitung
   */
  private static formatStructuredInput(appContext: AppContext): string {
    return `<app_context>
<app_overview>
${appContext.appDescription}
</app_overview>

<user_task>
${appContext.userTask}
</user_task>

<view_name>
${appContext.viewName}
</view_name>

${appContext.sourceCode ? `<source_code>
${appContext.sourceCode}
</source_code>` : ''}
</app_context>

<image>
[The provided image shows the current state of the application]
</image>`
  }

  /**
   * Nutzerorientierte Beispiele f√ºr freie Problemidentifikation
   * Basiert auf UX-LLM Studie: Offene Problemidentifikation ohne strukturelle Zw√§nge
   * Nutzt One-Shot Prompting mit konkreten Beispielen aus der wissenschaftlichen Forschung
   */
  private static getExamples(): string {
    return `<examples>
**Beispiel eines validen Usability-Problems (basierend auf UX-LLM Forschung):**

"Insufficient contrast between text and background color: The yellow background with white text on the category buttons may not provide enough contrast for users with visual impairments or when viewing in bright light conditions."

**Beispiel eines Interaktionsproblems:**

"No visual feedback on button press: The category buttons do not appear to have any visual feedback when tapped, which could leave users uncertain whether their input has been registered."

**Beispiel eines Navigationsproblems:**

"Lack of clear navigation cues: There is no clear indication of how to proceed to the next question after a selection is made, which could lead to user confusion."

**Beispiel eines Barrierefreiheitsproblems:**

"Inadequate touch targets: The button may have an inadequate touch target size, which could make it difficult for users to tap accurately, especially on devices with smaller screens."

**Beispiel eines Verst√§ndlichkeitsproblems:**

"Ambiguous progress bar: The progress bar does not have a label or any indication of what it represents, which could lead to confusion about the user's progress."
</examples>`
  }

  /**
   * Erstellt einen spezifischen Prompt f√ºr die iterative Optimierung
   * Verwendet bei der Prompt-Verfeinerung w√§hrend der Datengenerierung
   * Kritischer Schritt im Prompt Engineering zur kontinuierlichen Verbesserung
   */
  static createRefinedPrompt(appContext: AppContext, previousIssues: string[]): string {
    const basePrompt = this.createUsabilityPrompt(appContext, false)
    const refinements = this.getRefinements(previousIssues)
    
    return `${basePrompt}

${refinements}`
  }

  /**
   * Verfeinerungen basierend auf vorherigen Iterationen
   * Systematische Anpassungen um Qualit√§t der LLM-Ausgaben zu steigern
   */
  private static getRefinements(previousIssues: string[]): string {
    return `<refinements>
Ber√ºcksichtige folgende Punkte aus vorherigen Analysen:
${previousIssues.map(issue => `- ${issue}`).join('\n')}

Vermeide h√§ufige Probleme:
- Wiederholung bereits genannter Probleme
- Zu allgemeine oder vage Aussagen ("schlechte Navigation")
- Spekulative Probleme ohne klare Evidenz
- Technische Details, die nicht nutzerzentriert sind
- Irrelevante Informationen au√üerhalb der Usability-Bewertung
- Halluzinationen von nicht vorhandenen UI-Elementen

Fokussiere stattdessen auf:
- Spezifische, nachvollziehbare Probleme
- Direkte Auswirkungen auf die Benutzererfahrung
- Konkrete Verbesserungsvorschl√§ge
</refinements>`
  }

  /**
   * A/B Testing Utility f√ºr einfache Prompt-Varianten-Auswahl
   * Bietet eine einfache Schnittstelle f√ºr das Testen beider Varianten
   * 
   * @param appContext - App-Kontext f√ºr die Analyse
   * @param testPure - Wenn true, wird die PURE Variante verwendet, sonst EXTENDED
   * @param includeExamples - Ob Beispiele inkludiert werden sollen
   * @param customPrompt - Optionale benutzerdefinierte Zusatzanweisungen
   * @returns Strukturierter Prompt f√ºr die gew√§hlte Variante
   */
  static createABTestPrompt(
    appContext: AppContext,
    testPure: boolean = false,
    includeExamples: boolean = false,
    customPrompt?: string
  ): string {
    const variant: PromptVariant = testPure ? 'pure' : 'extended'
    
    return this.createUsabilityPrompt(appContext, includeExamples, customPrompt, variant)
  }

  /**
   * Erstellt beide Prompt-Varianten f√ºr direkten Vergleich
   * N√ºtzlich f√ºr die wissenschaftliche Auswertung und Dokumentation
   * 
   * @param appContext - App-Kontext f√ºr die Analyse
   * @param includeExamples - Ob Beispiele inkludiert werden sollen
   * @param customPrompt - Optionale benutzerdefinierte Zusatzanweisungen
   * @returns Objekt mit beiden Prompt-Varianten
   */
  static createBothVariants(
    appContext: AppContext,
    includeExamples: boolean = false,
    customPrompt?: string
  ): { pure: string; extended: string } {
    return {
      pure: this.createUsabilityPrompt(appContext, includeExamples, customPrompt, 'pure'),
      extended: this.createUsabilityPrompt(appContext, includeExamples, customPrompt, 'extended')
    }
  }
}

/**
 * Prompt-Varianten f√ºr verschiedene LLM-Modelle
 * Erm√∂glicht modellspezifische Optimierungen basierend auf St√§rken der LLMs
 */
export const ModelSpecificPrompts = {
  'gpt4o': {
    systemRole: 'Als multimodaler UX-Experte mit Fokus auf visueller Analyse, nutze deine F√§higkeiten zur detaillierten Bild- und Textanalyse f√ºr eine umfassende Usability-Bewertung. Analysiere sowohl die visuellen Elemente als auch die strukturellen Aspekte der Benutzeroberfl√§che.',
    focusAreas: ['Visuelle Hierarchie', 'Interaktionsdesign', 'Multimodale Konsistenz', '√Ñsthetische Bewertung', 'Informationsarchitektur'],
    additionalInstructions: 'Nutze deine visuellen Analysef√§higkeiten, um detaillierte Bewertungen zu Farben, Typografie, Layoutstrukturen und visuellen Affordanzen zu geben.'
  },
  
  'claude4': {
    systemRole: 'Als UX-Experte mit Fokus auf analytische Tiefe und l√§ngere Kontexte, nutze deine F√§higkeit zur Verarbeitung komplexer Informationen f√ºr eine strukturierte, wissenschaftlich fundierte Analyse mit ausf√ºhrlichen Begr√ºndungen.',
    focusAreas: ['Nutzerflow-Analyse', 'Kognitive Belastung', 'Konsistenz-Pr√ºfung', 'Detaillierte Heuristik-Bewertung', 'Kontext√ºbergreifende Probleme', 'Wissenschaftliche Fundierung'],
    additionalInstructions: 'F√ºhre eine tiefgehende Analyse durch mit ausf√ºhrlichen Begr√ºndungen, wissenschaftlichen Referenzen und detaillierten Bewertungen jeder Nielsen-Heuristik.'
  },
  
  'llama3': {
    systemRole: 'Als UX-Experte mit Fokus auf praktische und direkte Problembenennung, analysiere aus nutzerorientierter Sicht mit klaren, umsetzbaren Empfehlungen. Konzentriere dich auf die wichtigsten Usability-Aspekte.',
    focusAreas: ['Grundlegende Usability-Prinzipien', 'Klare Problemidentifikation', 'Zug√§nglichkeit', 'Nutzerfreundlichkeit', 'Praktische L√∂sungen'],
    additionalInstructions: 'Konzentriere dich auf die wichtigsten Usability-Probleme mit klaren, praktischen L√∂sungsvorschl√§gen. Vermeide √ºberm√§√üig technische Terminologie.'
  }
}

/**
 * Qualit√§tskontrolle f√ºr LLM-Antworten
 * Pr√ºft die Antwort auf typische Probleme
 */
export class ResponseValidator {
  static validateResponse(response: string): {
    isValid: boolean
    issues: string[]
    suggestions: string[]
  } {
    const issues: string[] = []
    const suggestions: string[] = []
    
    // Pr√ºfe auf zu kurze Antworten
    if (response.length < 200) {
      issues.push('Antwort zu kurz - m√∂glicherweise unvollst√§ndig')
      suggestions.push('Prompt erweitern oder spezifischere Anweisungen geben')
    }
    
    // Pr√ºfe auf wiederholte Phrasen (m√∂gliche Halluzination)
    const words = response.split(' ')
    const repeatedPhrases = this.findRepeatedPhrases(words)
    if (repeatedPhrases.length > 0) {
      issues.push('Wiederholte Phrasen entdeckt')
      suggestions.push('Prompt zur Vermeidung von Wiederholungen anpassen')
    }
    
    // Pr√ºfe auf Struktur
    if (!response.includes('##') && !response.includes('**')) {
      issues.push('Fehlende Strukturierung der Antwort')
      suggestions.push('Klarere Formatierungsanweisungen im Prompt')
    }
    
    return {
      isValid: issues.length === 0,
      issues,
      suggestions
    }
  }
  
  private static findRepeatedPhrases(words: string[]): string[] {
    // Vereinfachte Implementierung - kann erweitert werden
    const phrases = new Map<string, number>()
    for (let i = 0; i < words.length - 2; i++) {
      const phrase = words.slice(i, i + 3).join(' ')
      phrases.set(phrase, (phrases.get(phrase) || 0) + 1)
    }
    
    return Array.from(phrases.entries())
      .filter(([_, count]) => count > 1)
      .map(([phrase, _]) => phrase)
  }
}
